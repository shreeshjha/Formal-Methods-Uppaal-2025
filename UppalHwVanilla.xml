<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
	<declaration>// Place global declarations here.
const int NUM_ENEMIES = 6; // 3 Circles, 3 Squares

int pos[NUM_ENEMIES] = {0, 0, 0, 0, 0, 0};
int hp[NUM_ENEMIES] = {50,50,50,50,50,50};
int dmg[NUM_ENEMIES] = {3, 3, 3, 5, 5, 5};


typedef struct {
  int x;
  int y;
} Coord;

const int PATH_LENGTH = 23;
const Coord path[PATH_LENGTH] = {
    {0,0}, {1,0}, {2,0}, {3,0}, {4,0}, 
    {4,1}, {4,2}, {4,3}, {4,4}, {5,4},
    {6,4}, {7,4}, {8,4}, {8,5}, {8,6}, 
    {8,7}, {9,7}, {10,7}, {11,7}, {12,7}, 
    {13,7}, {14,7}, {15,7}
};
const Coord mainTower = {15, 7};



int lives = 100;

// === Configuration VI: Assignment ===
const int basic_x[1] = {5};
const int basic_y[1] = {5};

const int cannon_x[4] = {8, 8, 14, 14};
const int cannon_y[4] = {2, 6, 2, 6};

const int sniper_x[2] = {2, 11};
const int sniper_y[2] = {3, 5};


</declaration>
	<template>
		<name>ClockTick</name>
		<declaration>clock tt;</declaration>
		<location id="id0" x="0" y="0">
			<name x="-10" y="-34">Tick</name>
			<label kind="invariant" x="-10" y="17">tt &lt;= 1</label>
		</location>
		<init ref="id0"/>
		<transition id="id1">
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="guard" x="-84" y="12">tt==1</label>
			<label kind="assignment" x="-84" y="46">tt=0</label>
			<nail x="-102" y="93"/>
			<nail x="-102" y="-8"/>
		</transition>
	</template>
	<template>
		<name>GameMonitor</name>
		<location id="id2" x="0" y="0">
			<name x="-10" y="-34">Wait</name>
		</location>
		<location id="id3" x="0" y="110">
			<name x="-10" y="76">Done</name>
		</location>
		<init ref="id2"/>
		<transition id="id4">
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="guard" x="0" y="21">forall (i:int[0,5]) (hp[i] == 0 || (pos[i] == PATH_LENGTH - 1 &amp;&amp; hp[i] &gt; 0))</label>
		</transition>
	</template>
	<template>
		<name>SniperTurret</name>
		<parameter>int x, int y</parameter>
		<declaration>clock t;
const int FIRE_RATE = 10;
const int RANGE = 8;
const int DAMAGE = 10;
</declaration>
		<location id="id5" x="0" y="0">
			<name x="-10" y="-34">Idle</name>
		</location>
		<location id="id6" x="0" y="127">
			<name x="-10" y="93">Firing</name>
		</location>
		<init ref="id5"/>
		<transition id="id7">
			<source ref="id6"/>
			<target ref="id5"/>
			<nail x="-127" y="127"/>
		</transition>
		<transition id="id8">
			<source ref="id5"/>
			<target ref="id6"/>
			<label kind="guard" x="0" y="29">t&gt;=FIRE_RATE</label>
			<label kind="assignment" x="0" y="63">t = 0,
hp[0] = (hp[0] &gt; 0 &amp;&amp; abs(path[pos[0]].x - x) + abs(path[pos[0]].y - y) &lt;= RANGE) ? hp[0] - DAMAGE : hp[0],
hp[1] = (hp[1] &gt; 0 &amp;&amp; abs(path[pos[1]].x - x) + abs(path[pos[1]].y - y) &lt;= RANGE) ? hp[1] - DAMAGE : hp[1],
hp[2] = (hp[2] &gt; 0 &amp;&amp; abs(path[pos[2]].x - x) + abs(path[pos[2]].y - y) &lt;= RANGE) ? hp[2] - DAMAGE : hp[2],
hp[3] = (hp[3] &gt; 0 &amp;&amp; abs(path[pos[3]].x - x) + abs(path[pos[3]].y - y) &lt;= RANGE) ? hp[3] - DAMAGE : hp[3],
hp[4] = (hp[4] &gt; 0 &amp;&amp; abs(path[pos[4]].x - x) + abs(path[pos[4]].y - y) &lt;= RANGE) ? hp[4] - DAMAGE : hp[4],
hp[5] = (hp[5] &gt; 0 &amp;&amp; abs(path[pos[5]].x - x) + abs(path[pos[5]].y - y) &lt;= RANGE) ? hp[5] - DAMAGE : hp[5]</label>
		</transition>
	</template>
	<template>
		<name>CannonTurret</name>
		<parameter>int x, int y</parameter>
		<declaration>clock t;
const int FIRE_RATE = 4;
const int RANGE = 6;
const int DAMAGE = 6;
</declaration>
		<location id="id9" x="0" y="0">
			<name x="-10" y="-34">Idle</name>
		</location>
		<location id="id10" x="0" y="127">
			<name x="-10" y="93">Firing</name>
		</location>
		<init ref="id9"/>
		<transition id="id11">
			<source ref="id10"/>
			<target ref="id9"/>
			<nail x="-102" y="127"/>
			<nail x="-127" y="127"/>
		</transition>
		<transition id="id12">
			<source ref="id9"/>
			<target ref="id10"/>
			<label kind="guard" x="0" y="29">t&gt;=FIRE_RATE</label>
			<label kind="assignment" x="0" y="63">t = 0,
hp[0] = (hp[0] &gt; 0 &amp;&amp; abs(path[pos[0]].x - x) + abs(path[pos[0]].y - y) &lt;= RANGE) ? hp[0] - DAMAGE : hp[0],
hp[1] = (hp[1] &gt; 0 &amp;&amp; abs(path[pos[1]].x - x) + abs(path[pos[1]].y - y) &lt;= RANGE) ? hp[1] - DAMAGE : hp[1],
hp[2] = (hp[2] &gt; 0 &amp;&amp; abs(path[pos[2]].x - x) + abs(path[pos[2]].y - y) &lt;= RANGE) ? hp[2] - DAMAGE : hp[2],
hp[3] = (hp[3] &gt; 0 &amp;&amp; abs(path[pos[3]].x - x) + abs(path[pos[3]].y - y) &lt;= RANGE) ? hp[3] - DAMAGE : hp[3],
hp[4] = (hp[4] &gt; 0 &amp;&amp; abs(path[pos[4]].x - x) + abs(path[pos[4]].y - y) &lt;= RANGE) ? hp[4] - DAMAGE : hp[4],
hp[5] = (hp[5] &gt; 0 &amp;&amp; abs(path[pos[5]].x - x) + abs(path[pos[5]].y - y) &lt;= RANGE) ? hp[5] - DAMAGE : hp[5]</label>
		</transition>
	</template>
	<template>
		<name>BasicTurret</name>
		<parameter>int x,int y</parameter>
		<declaration>clock t;
const int FIRE_RATE = 2;
const int RANGE = 3;
const int DAMAGE = 2;
</declaration>
		<location id="id13" x="0" y="0">
			<name x="-10" y="-34">Idle</name>
		</location>
		<location id="id14" x="0" y="153">
			<name x="-10" y="119">Firing</name>
		</location>
		<init ref="id13"/>
		<transition id="id15">
			<source ref="id14"/>
			<target ref="id13"/>
			<nail x="-153" y="153"/>
		</transition>
		<transition id="id16">
			<source ref="id13"/>
			<target ref="id14"/>
			<label kind="guard" x="0" y="42">t&gt;=FIRE_RATE</label>
			<label kind="assignment" x="0" y="76">t = 0,
hp[0] = (hp[0] &gt; 0 &amp;&amp; abs(path[pos[0]].x - x) + abs(path[pos[0]].y - y) &lt;= RANGE) ? hp[0] - DAMAGE : hp[0],
hp[1] = (hp[1] &gt; 0 &amp;&amp; abs(path[pos[1]].x - x) + abs(path[pos[1]].y - y) &lt;= RANGE) ? hp[1] - DAMAGE : hp[1],
hp[2] = (hp[2] &gt; 0 &amp;&amp; abs(path[pos[2]].x - x) + abs(path[pos[2]].y - y) &lt;= RANGE) ? hp[2] - DAMAGE : hp[2],
hp[3] = (hp[3] &gt; 0 &amp;&amp; abs(path[pos[3]].x - x) + abs(path[pos[3]].y - y) &lt;= RANGE) ? hp[3] - DAMAGE : hp[3],
hp[4] = (hp[4] &gt; 0 &amp;&amp; abs(path[pos[4]].x - x) + abs(path[pos[4]].y - y) &lt;= RANGE) ? hp[4] - DAMAGE : hp[4],
hp[5] = (hp[5] &gt; 0 &amp;&amp; abs(path[pos[5]].x - x) + abs(path[pos[5]].y - y) &lt;= RANGE) ? hp[5] - DAMAGE : hp[5]</label>
		</transition>
	</template>
	<template>
		<name>TurretAI</name>
		<parameter>int x, int y</parameter>
		<declaration>clock t;
const int FIRE_RATE = 2; // basic
const int RANGE = 2;
const int DAMAGE = 2;
</declaration>
		<location id="id17" x="0" y="0">
			<name x="-10" y="-34">Idle</name>
		</location>
		<location id="id18" x="0" y="85">
			<name x="-10" y="51">Firing</name>
		</location>
		<init ref="id17"/>
		<transition id="id19">
			<source ref="id18"/>
			<target ref="id17"/>
			<nail x="-136" y="93"/>
		</transition>
		<transition id="id20">
			<source ref="id17"/>
			<target ref="id18"/>
			<label kind="guard" x="25" y="-17">t&gt;=FIRE_RATE</label>
			<label kind="assignment" x="263" y="-51">t = 0,
t = 0,
hp[0] = (hp[0] &gt; 0 &amp;&amp; abs(path[pos[0]].x - x) + abs(path[pos[0]].y - y) &lt;= RANGE) ? hp[0] - DAMAGE : hp[0],
hp[1] = (hp[1] &gt; 0 &amp;&amp; abs(path[pos[1]].x - x) + abs(path[pos[1]].y - y) &lt;= RANGE) ? hp[1] - DAMAGE : hp[1],
hp[2] = (hp[2] &gt; 0 &amp;&amp; abs(path[pos[2]].x - x) + abs(path[pos[2]].y - y) &lt;= RANGE) ? hp[2] - DAMAGE : hp[2],
hp[3] = (hp[3] &gt; 0 &amp;&amp; abs(path[pos[3]].x - x) + abs(path[pos[3]].y - y) &lt;= RANGE) ? hp[3] - DAMAGE : hp[3],
hp[4] = (hp[4] &gt; 0 &amp;&amp; abs(path[pos[4]].x - x) + abs(path[pos[4]].y - y) &lt;= RANGE) ? hp[4] - DAMAGE : hp[4],
hp[5] = (hp[5] &gt; 0 &amp;&amp; abs(path[pos[5]].x - x) + abs(path[pos[5]].y - y) &lt;= RANGE) ? hp[5] - DAMAGE : hp[5]</label>
		</transition>
	</template>
	<template>
		<name>EnemyTemplate</name>
		<parameter>const int id</parameter>
		<declaration>clock clk;
int local_pos = 0;
</declaration>
		<location id="id21" x="-76" y="-255">
			<name x="-86" y="-289">Spawned</name>
		</location>
		<location id="id22" x="-68" y="68">
			<name x="-78" y="34">Moving</name>
		</location>
		<location id="id23" x="297" y="-144">
			<name x="287" y="-178">Goal</name>
		</location>
		<location id="id24" x="-76" y="255">
			<name x="-86" y="221">Killed</name>
		</location>
		<init ref="id21"/>
		<transition id="id25">
			<source ref="id22"/>
			<target ref="id24"/>
			<label kind="guard" x="-72" y="127">clk &gt;= 1 &amp;&amp; hp[id] == 0</label>
			<label kind="assignment" x="-72" y="161">pos[id] = local_pos</label>
		</transition>
		<transition id="id26">
			<source ref="id22"/>
			<target ref="id23"/>
			<label kind="guard" x="-50" y="-72">clk&gt;=1 &amp;&amp; hp[id] &gt; 0 &amp;&amp; local_pos &gt;= PATH_LENGTH - 1</label>
			<label kind="assignment" x="-50" y="-38">pos[id] = local_pos,
lives = lives - dmg[id]</label>
		</transition>
		<transition id="id27">
			<source ref="id22"/>
			<target ref="id22"/>
			<label kind="guard" x="-143" y="63">clk&gt;=1 &amp;&amp; hp[id] &gt; 0 &amp;&amp; local_pos &lt; PATH_LENGTH - 1</label>
			<label kind="assignment" x="-143" y="97">clk = 0,
local_pos = local_pos + 1,
pos[id] = local_pos</label>
			<nail x="-161" y="127"/>
			<nail x="-161" y="68"/>
		</transition>
		<transition id="id28">
			<source ref="id21"/>
			<target ref="id22"/>
		</transition>
	</template>
	<system>// Place template instantiations here.

E0 = EnemyTemplate(0);
E1 = EnemyTemplate(1);
E2 = EnemyTemplate(2);
E3 = EnemyTemplate(3);
E4 = EnemyTemplate(4);
E5 = EnemyTemplate(5);
Monitor = GameMonitor();
ClockTick1 = ClockTick();
Basic1 = BasicTurret(basic_x[0], basic_y[0]);
Cannon1 = CannonTurret(cannon_x[0], cannon_y[0]);
Cannon3 = CannonTurret(cannon_x[1], cannon_y[1]);
Cannon4 = CannonTurret(cannon_x[2], cannon_y[2]);
Sniper1 = SniperTurret(sniper_x[0], sniper_y[0]);
Sniper2 = SniperTurret(sniper_x[1], sniper_y[1]);



system E0, E1, E2, E3, E4, E5, Monitor, ClockTick1, Basic1, Cannon1, Cannon3, Cannon4, Sniper1, Sniper2;



</system>
	<queries>
		<query>
			<formula>E&lt;&gt; Monitor.Done









</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2025-04-15 18:13:13 +0200">
			</result>
		</query>
	</queries>
</nta>
