<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
	<declaration>// Game Constants
const int NUM_ENEMIES = 6; // 3 Circles, 3 Squares
const int TIMEOUT = 100; // Game timeout in time units

// Enemy Parameters
const int CIRCLE_SPEED = 1;
const int CIRCLE_HEALTH = 10;
const int CIRCLE_DAMAGE = 2;
const int SQUARE_SPEED = 3;
const int SQUARE_HEALTH = 20;
const int SQUARE_DAMAGE = 4;

// Turret Parameters
const int BASIC_RANGE = 2;
const int BASIC_FIRE_SPEED = 2;
const int BASIC_DAMAGE = 2;
const int CANNON_RANGE = 1;
const int CANNON_FIRE_SPEED = 7;
const int CANNON_DAMAGE = 5;
const int SNIPER_RANGE = 4;
const int SNIPER_FIRE_SPEED = 20;
const int SNIPER_DAMAGE = 8;

// Main Tower
const int MAIN_TOWER_HEALTH = 10;

// Map Constants
const int MAP_WIDTH = 16;
const int MAP_HEIGHT = 8;

// Enemy tracking arrays
int pos[NUM_ENEMIES] = {0, 0, 0, 0, 0, 0}; // Current position on path
int hp[NUM_ENEMIES] = {10, 10, 10, 20, 20, 20}; // Health points
int dmg[NUM_ENEMIES] = {2, 2, 2, 4, 4, 4}; // Damage value
int spawn_time[NUM_ENEMIES] = {0, 2, 4, 0, 3, 6}; // When enemies spawn
int time_on_map[NUM_ENEMIES] = {0, 0, 0, 0, 0, 0}; // Time spent on map

// Game state tracking
int lives = 10; // Main tower health
bool game_over = false;
bool timeout_reached = false;
clock global_clock;

// Coordinate structure for map positions
typedef struct {
  int x;
  int y;
} Coord;

// Main path definition
const int PATH_LENGTH = 23;
const Coord path[PATH_LENGTH] = {
    {0,0}, {1,0}, {2,0}, {3,0}, {4,0}, 
    {4,1}, {4,2}, {4,3}, {4,4}, {5,4},
    {6,4}, {7,4}, {8,4}, {8,5}, {8,6}, 
    {8,7}, {9,7}, {10,7}, {11,7}, {12,7}, 
    {13,7}, {14,7}, {15,4}
};

// Branch points and alternate paths
const int BRANCH_POINTS = 2;
const Coord branches[BRANCH_POINTS] = {{7,4}, {10,7}};

// Path from branch point 1 (position 7,4)
const int ALT_PATH1_LENGTH = 10;
const Coord alt_path1[ALT_PATH1_LENGTH] = {
    {7,3}, {7,2}, {7,1}, {8,1}, {9,1}, 
    {10,1}, {11,1}, {12,1}, {13,1}, {14,1}
};

// Path from branch point 2 (position 10,7)
const int ALT_PATH2_LENGTH = 5;
const Coord alt_path2[ALT_PATH2_LENGTH] = {
    {10,6}, {10,5}, {11,5}, {12,5}, {13,5}
};

// Track which path each enemy is on (0 = main path, 1 = alt_path1, 2 = alt_path2)
int path_choice[NUM_ENEMIES] = {0, 0, 0, 0, 0, 0};
// Track position on alternate paths
int alt_pos[NUM_ENEMIES] = {0, 0, 0, 0, 0, 0};

// Main tower position
const Coord mainTower = {15, 4};

// ==============================================
// Helper Functions
// ==============================================

// Manhattan distance between coordinates
int distance(int x1, int y1, int x2, int y2) {
    return abs(x1-x2) + abs(y1-y2);
}

// Get current coordinates of an enemy
Coord get_enemy_position(int enemy_id) {
    if (path_choice[enemy_id] == 0) {
        return path[pos[enemy_id]];
    } 
    if (path_choice[enemy_id] == 1) {
        return alt_path1[alt_pos[enemy_id]];
    }
    return alt_path2[alt_pos[enemy_id]];
}

// Check if enemy is in range of turret
bool in_range(int enemy_id, int turret_x, int turret_y, int range) {
    Coord enemy_pos = get_enemy_position(enemy_id);
    return distance(enemy_pos.x, enemy_pos.y, turret_x, turret_y) &lt;= range;
}

// Returns true if at least one enemy is in range of a turret
bool target_available(int tx, int ty, int range) {
    int i;
    for (i = 0; i &lt; NUM_ENEMIES; i++) {
        if (hp[i] &gt; 0 &amp;&amp; pos[i] &gt;= 0 &amp;&amp; in_range(i, tx, ty, range)) {
            return true;
        }
    }
    return false;
}

// Find highest priority target and damage it
void fire(int tx, int ty, int damage, int range) {
    int best_target = -1;
    int i;
    
    // First check squares (enemies 3-5)
    for (i = 3; i &lt; NUM_ENEMIES; i++) {
        if (hp[i] &gt; 0 &amp;&amp; pos[i] &gt;= 0) {
            Coord enemy_pos = get_enemy_position(i);
            int d = distance(enemy_pos.x, enemy_pos.y, tx, ty);
            
            if (d &lt;= range &amp;&amp; (best_target == -1 || time_on_map[i] &lt; time_on_map[best_target])) {
                best_target = i;
            }
        }
    }
    
    // If no squares, check circles (enemies 0-2)
    if (best_target == -1) {
        for (i = 0; i &lt; 3; i++) {
            if (hp[i] &gt; 0 &amp;&amp; pos[i] &gt;= 0) {
                Coord enemy_pos = get_enemy_position(i);
                int d = distance(enemy_pos.x, enemy_pos.y, tx, ty);
                
                if (d &lt;= range &amp;&amp; (best_target == -1 || time_on_map[i] &lt; time_on_map[best_target])) {
                    best_target = i;
                }
            }
        }
    }
    
    // Apply damage
    if (best_target != -1) {
        hp[best_target] = hp[best_target] - damage;
    }
}

// Returns true if all enemies are either killed or have reached the goal
bool all_enemies_gone() {
    int i;
    for (i = 0; i &lt; NUM_ENEMIES; i++) {
        if (hp[i] &gt; 0 &amp;&amp; pos[i] &gt;= 0 &amp;&amp; pos[i] &lt; PATH_LENGTH) {
            return false;
        }
    }
    return true;
}

// Check if position is a branch point
bool is_branch_point(int x, int y) {
    int i;
    for (i = 0; i &lt; BRANCH_POINTS; i++) {
        if (branches[i].x == x &amp;&amp; branches[i].y == y) {
            return true;
        }
    }
    return false;
}

// Update enemy position based on current path
void update_enemy_position(int id) {
    if (path_choice[id] == 0) {
        // Main path
        pos[id] = pos[id] + 1;
    } else if (path_choice[id] == 1) {
        // Alternate path 1
        alt_pos[id] = alt_pos[id] + 1;
    } else {
        // Alternate path 2
        alt_pos[id] = alt_pos[id] + 1;
    }
}

// Check if enemy has reached the end of its path
bool reached_path_end(int id) {
    if (path_choice[id] == 0) {
        return pos[id] &gt;= PATH_LENGTH - 1;
    } else if (path_choice[id] == 1) {
        return alt_pos[id] &gt;= ALT_PATH1_LENGTH - 1;
    } else {
        return alt_pos[id] &gt;= ALT_PATH2_LENGTH - 1;
    }
}

int get_enemy_speed(int enemy_id) {
    return (enemy_id &lt; 3) ? CIRCLE_SPEED : SQUARE_SPEED;
}

bool can_move_forward(int enemy_id) {
    Coord pos = get_enemy_position(enemy_id);
    return !is_branch_point(pos.x, pos.y) &amp;&amp; !reached_path_end(enemy_id);
}

// Configuration for verification
// Configuration VI from assignment
const int basic_x[1] = {5};
const int basic_y[1] = {5};
const int cannon_x[4] = {8, 8, 14, 14};
const int cannon_y[4] = {2, 6, 2, 6};
const int sniper_x[2] = {2, 11};
const int sniper_y[2] = {3, 5};

// Custom Configurations for part VIII
// Configuration 1
const int config1_basic_x[2] = {5, 11};
const int config1_basic_y[2] = {5, 2};
const int config1_cannon_x[1] = {8};
const int config1_cannon_y[1] = {6};
const int config1_sniper_x[1] = {14};
const int config1_sniper_y[1] = {2};

// Configuration 2
const int config2_basic_x[1] = {2};
const int config2_basic_y[1] = {3};
const int config2_cannon_x[2] = {8, 14};
const int config2_cannon_y[2] = {2, 6};
const int config2_sniper_x[1] = {11};
const int config2_sniper_y[1] = {5};</declaration>
	<template>
		<name>GameMonitor</name>
		<declaration>// ============================================== 
// Game Monitor Template
// ==============================================
/*
 * Monitors the overall game state to determine win/loss conditions.
 */
</declaration>
		<location id="id0" x="-68" y="-306">
			<name x="-78" y="-340">Wait</name>
			<label kind="comments" x="-78" y="-247">Game is going on still</label>
		</location>
		<location id="id1" x="187" y="-51">
			<name x="177" y="-85">LoseState</name>
		</location>
		<location id="id2" x="-280" y="-51">
			<name x="-290" y="-85">WinState</name>
		</location>
		<location id="id3" x="-51" y="212">
			<name x="-61" y="178">TimeoutState</name>
		</location>
		<init ref="id0"/>
		<transition id="id4">
			<source ref="id0"/>
			<target ref="id3"/>
			<label kind="guard" x="-59" y="-81">timeout_reached</label>
			<label kind="assignment" x="-59" y="-47">game_over = true</label>
		</transition>
		<transition id="id5">
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="-50" y="-212">lives &lt;= 0</label>
			<label kind="assignment" x="-50" y="-178">game_over = true</label>
		</transition>
		<transition id="id6">
			<source ref="id0"/>
			<target ref="id2"/>
			<label kind="guard" x="-365" y="-272">all_enemies_gone() &amp;&amp; lives &gt; 0</label>
			<label kind="assignment" x="-262" y="-178">game_over = true</label>
		</transition>
	</template>
	<template>
		<name>SniperTurret</name>
		<parameter>int x,int y</parameter>
		<declaration>// ============================================== 
// Sniper Turret Template
// ==============================================
/*
 * Models the behavior of a Sniper Turret in the tower defense game.
 * Sniper turrets have long range, very slow firing speed, and high damage.
 * Parameters:
 *   - x, y: Position coordinates on the map
 */

clock t;  // Local clock for firing timing

// Constants for this turret type
const int RANGE = SNIPER_RANGE;
const int FIRE_RATE = SNIPER_FIRE_SPEED;
const int DAMAGE = SNIPER_DAMAGE;
</declaration>
		<location id="id7" x="-119" y="-263">
			<name x="-129" y="-297">Idle</name>
			<label kind="comments" x="-129" y="-204">Ready to fire, oh yes</label>
		</location>
		<location id="id8" x="-110" y="0">
			<name x="-120" y="-34">Firing</name>
			<label kind="comments" x="-120" y="59">I am firing</label>
		</location>
		<init ref="id7"/>
		<transition id="id9">
			<source ref="id8"/>
			<target ref="id7"/>
			<label kind="guard" x="-186" y="-165">true</label>
			<nail x="-204" y="-263"/>
		</transition>
		<transition id="id10">
			<source ref="id7"/>
			<target ref="id8"/>
			<label kind="guard" x="-114" y="-165">t &gt;= FIRE_RATE &amp;&amp; target_available(x, y, RANGE)</label>
			<label kind="assignment" x="-114" y="-131">t = 0, fire(x, y, DAMAGE, RANGE)</label>
		</transition>
	</template>
	<template>
		<name>CannonTurret</name>
		<parameter>int x, int y</parameter>
		<declaration>// ============================================== 
// Cannon Turret Template
// ==============================================
/*
 * Models the behavior of a Cannon Turret in the tower defense game.
 * Cannon turrets have short range, slow firing speed, and medium damage.
 * Parameters:
 *   - x, y: Position coordinates on the map
 */


clock t;   // Local clock for firing timing

// Constants for this turret type
const int RANGE = CANNON_RANGE;
const int FIRE_RATE = CANNON_FIRE_SPEED;
const int DAMAGE = CANNON_DAMAGE;</declaration>
		<location id="id11" x="-382" y="-612">
			<name x="-392" y="-646">Idle</name>
			<label kind="comments" x="-392" y="-553">Ready to fire, yeah</label>
		</location>
		<location id="id12" x="-374" y="-289">
			<name x="-384" y="-323">Firing</name>
			<label kind="comments" x="-384" y="-230">I am firing</label>
		</location>
		<init ref="id11"/>
		<transition id="id13">
			<source ref="id12"/>
			<target ref="id11"/>
			<label kind="guard" x="-449" y="-488">true</label>
			<nail x="-467" y="-620"/>
		</transition>
		<transition id="id14">
			<source ref="id11"/>
			<target ref="id12"/>
			<label kind="guard" x="-378" y="-484">t &gt;= FIRE_RATE &amp;&amp; target_available(x, y, RANGE)</label>
			<label kind="assignment" x="-378" y="-450">t = 0, fire(x, y, DAMAGE, RANGE)</label>
		</transition>
	</template>
	<template>
		<name>BasicTurret</name>
		<parameter>int x, int y</parameter>
		<declaration>// ============================================== 
// Basic Turret Template
// ==============================================
/*
 * Models the behavior of a Basic Turret in the tower defense game.
 * Basic turrets have medium range, medium firing speed, and low damage.
 * Parameters:
 *   - x, y: Position coordinates on the map
 */


clock t;  // Local clock for firing timing

// Constants for this turret type
const int RANGE = BASIC_RANGE;
const int FIRE_RATE = BASIC_FIRE_SPEED;
const int DAMAGE = BASIC_DAMAGE;</declaration>
		<location id="id15" x="-212" y="-280">
			<name x="-222" y="-314">Idle</name>
			<label kind="comments" x="-222" y="-221">Ready to fire, yeah</label>
		</location>
		<location id="id16" x="-212" y="34">
			<name x="-222" y="0">Firing</name>
			<label kind="comments" x="-222" y="93">I am Firing</label>
		</location>
		<init ref="id15"/>
		<transition id="id17">
			<source ref="id16"/>
			<target ref="id15"/>
			<label kind="guard" x="-271" y="-157">true</label>
			<nail x="-289" y="-280"/>
		</transition>
		<transition id="id18">
			<source ref="id15"/>
			<target ref="id16"/>
			<label kind="guard" x="-212" y="-157">t &gt;= FIRE_RATE &amp;&amp; target_available(x, y, RANGE)</label>
			<label kind="assignment" x="-212" y="-123">t = 0, fire(x, y, DAMAGE, RANGE)</label>
		</transition>
	</template>
	<template>
		<name>EnemyTemplate</name>
		<parameter>const int id</parameter>
		<declaration>// ============================================== 
// Enemy Template
// ==============================================
/*
 * Models the behavior of an enemy in the tower defense game.
 * Each enemy follows a path, can be damaged by turrets, and attacks the main tower upon reaching it.
 * Parameters:
 *   - id: Unique identifier for the enemy (0-2 for Circles, 3-5 for Squares)
 */


clock clk; // Local clock for enemy movement timing</declaration>
		<location id="id19" x="51" y="-425">
			<name x="41" y="-459">Spawned</name>
			<label kind="comments" x="41" y="-366">Enemy has spawned but not started moving</label>
		</location>
		<location id="id20" x="-221" y="-102">
			<name x="-231" y="-136">Moving</name>
			<label kind="comments" x="-231" y="-43">Enemy is moving along the path</label>
		</location>
		<location id="id21" x="170" y="-102">
			<name x="160" y="-136">BranchDecision</name>
			<label kind="comments" x="160" y="-43">Enemy needs to choose a path</label>
		</location>
		<location id="id22" x="-127" y="229">
			<name x="-137" y="195">Goal</name>
			<label kind="comments" x="-137" y="288">Enemy reached the main tower</label>
		</location>
		<location id="id23" x="221" y="238">
			<name x="211" y="204">Killed</name>
			<label kind="comments" x="211" y="297">Enemy got killed, sad :(</label>
		</location>
		<init ref="id19"/>
		<transition id="id24">
			<source ref="id21"/>
			<target ref="id23"/>
			<label kind="guard" x="195" y="34">hp[id] &lt;= 0</label>
			<label kind="assignment" x="195" y="68">pos[id] = -1, clk = 0</label>
		</transition>
		<transition id="id25">
			<source ref="id21"/>
			<target ref="id22"/>
			<label kind="guard" x="-109" y="29">clk &gt;= (id &lt; 3 ? CIRCLE_SPEED : SQUARE_SPEED) &amp;&amp; hp[id] &gt; 0 &amp;&amp; reached_path_end(id)</label>
			<label kind="assignment" x="-109" y="63">lives = lives - dmg[id], pos[id] = -1, clk = 0</label>
		</transition>
		<transition id="id26">
			<source ref="id21"/>
			<target ref="id20"/>
			<label kind="guard" x="-160" y="-30">get_enemy_position(id).x == 10 &amp;&amp; get_enemy_position(id).y == 7</label>
			<label kind="assignment" x="-160" y="4">path_choice[id] = 2, alt_pos[id] = 0, clk = 0</label>
			<label kind="comments" x="-160" y="29">Choose alt path 2</label>
			<nail x="-170" y="161"/>
		</transition>
		<transition id="id27">
			<source ref="id21"/>
			<target ref="id20"/>
			<label kind="guard" x="-135" y="-47">get_enemy_position(id).x == 7 &amp;&amp; get_enemy_position(id).y == 4</label>
			<label kind="assignment" x="-135" y="-13">path_choice[id] = 1, alt_pos[id] = 0, clk = 0</label>
			<label kind="comments" x="-135" y="12">Choose alt path 1</label>
			<nail x="-153" y="76"/>
		</transition>
		<transition id="id28">
			<source ref="id21"/>
			<target ref="id20"/>
			<label kind="guard" x="-118" y="-68">true</label>
			<label kind="assignment" x="-118" y="-34">path_choice[id] = 0, update_enemy_position(id), clk = 0</label>
			<label kind="comments" x="-118" y="-9">Choose main path</label>
			<nail x="-136" y="34"/>
		</transition>
		<transition id="id29">
			<source ref="id20"/>
			<target ref="id21"/>
			<label kind="guard" x="-203" y="-136">clk &gt;= (id &lt; 3 ? CIRCLE_SPEED : SQUARE_SPEED) &amp;&amp; hp[id] &gt; 0 &amp;&amp; is_branch_point(get_enemy_position(id).x, get_enemy_position(id).y)</label>
			<label kind="assignment" x="-203" y="-102">clk = 0, time_on_map[id] = time_on_map[id] + 1</label>
		</transition>
		<transition id="id30">
			<source ref="id20"/>
			<target ref="id20"/>
			<label kind="guard" x="-544" y="-246">clk &gt;= (id &lt; 3 ? CIRCLE_SPEED : SQUARE_SPEED) &amp;&amp; hp[id] &gt; 0 &amp;&amp; !is_branch_point(get_enemy_position(id).x, get_enemy_position(id).y) &amp;&amp; !reached_path_end(id)</label>
			<label kind="assignment" x="-518" y="-212">update_enemy_position(id), clk = 0, time_on_map[id] = time_on_map[id] + 1</label>
			<nail x="-569" y="-263"/>
			<nail x="-569" y="-51"/>
		</transition>
		<transition id="id31">
			<source ref="id19"/>
			<target ref="id20"/>
			<label kind="guard" x="-204" y="-331">global_clock &gt;= spawn_time[id] &amp;&amp; hp[id] &gt; 0</label>
			<label kind="assignment" x="-204" y="-306">pos[id] = 0, time_on_map[id] = 0</label>
		</transition>
	</template>
	<template>
		<name x="5" y="5">ClockTick</name>
		<declaration>// ============================================== 
// Clock Tick Template
// ==============================================
/*
 * Global clock template that provides timing for the entire system.
 * This template has a single state with a transition that occurs every time unit.
 */

clock tt;</declaration>
		<location id="id32" x="0" y="0">
			<name x="-10" y="-34">Tick</name>
			<label kind="invariant" x="-10" y="17">tt&lt;=1</label>
		</location>
		<init ref="id32"/>
		<transition id="id33">
			<source ref="id32"/>
			<target ref="id32"/>
			<label kind="guard" x="-67" y="17">tt==1</label>
			<label kind="assignment" x="-67" y="51">tt=0,
timeout_reached = (global_clock &gt;= TIMEOUT ? true : false)</label>
			<nail x="-85" y="102"/>
			<nail x="-85" y="0"/>
		</transition>
	</template>
	<system>// ==============================================
// System Declaration
// ==============================================


clock1 = ClockTick();

// Enemies
E0 = EnemyTemplate(0);
E1 = EnemyTemplate(1);
E2 = EnemyTemplate(2);
E3 = EnemyTemplate(3);
E4 = EnemyTemplate(4);
E5 = EnemyTemplate(5);
GM = GameMonitor();
// For no-turret verification
system clock1, E0, E1, E2, E3, E4, E5, GM;

// Configuration VI (from assignment)
//Basic1 = BasicTurret(basic_x[0], basic_y[0]);
//Cannon1 = CannonTurret(cannon_x[0], cannon_y[0]);
//Cannon2 = CannonTurret(cannon_x[1], cannon_y[1]);
//Cannon3 = CannonTurret(cannon_x[2], cannon_y[2]);
//Cannon4 = CannonTurret(cannon_x[3], cannon_y[3]);
//Sniper1 = SniperTurret(sniper_x[0], sniper_y[0]);
//Sniper2 = SniperTurret(sniper_x[1], sniper_y[1]);

//system clock1, E0, E1, E2, E3, E4, E5, Basic1, Cannon1, Cannon2, Cannon3, Cannon4, Sniper1, Sniper2, GM;

// Configuration 1 (custom)
// Basic1 = BasicTurret(config1_basic_x[0], config1_basic_y[0]);
// Basic2 = BasicTurret(config1_basic_x[1], config1_basic_y[1]);
// Cannon1 = CannonTurret(config1_cannon_x[0], config1_cannon_y[0]);
// Sniper1 = SniperTurret(config1_sniper_x[0], config1_sniper_y[0]);
// system clock1, E0, E1, E2, E3, E4, E5, Basic1, Basic2, Cannon1, Sniper1, GM;

// Configuration 2 (custom)
// Basic1 = BasicTurret(config2_basic_x[0], config2_basic_y[0]);
// Cannon1 = CannonTurret(config2_cannon_x[0], config2_cannon_y[0]);
// Cannon2 = CannonTurret(config2_cannon_x[1], config2_cannon_y[1]);
// Sniper1 = SniperTurret(config2_sniper_x[0], config2_sniper_y[0]);
// system clock1, E0, E1, E2, E3, E4, E5, Basic1, Cannon1, Cannon2, Sniper1, GM;</system>
	<queries>
		<query>
			<formula/>
			<comment/>
		</query>
	</queries>
</nta>
