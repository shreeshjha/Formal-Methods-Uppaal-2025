<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
	<declaration>// Place global declarations here.
// Game Constants
const int NUM_ENEMIES = 6; // 3 Circles, 3 Squares
const int TIMEOUT = 100; // Game timeout in time units
const int LAST_SPAWN = 6; // = max value in spawn_time[]

// Enemy Parameters
const int CIRCLE_SPEED = 1;
const int CIRCLE_HEALTH = 10;
const int CIRCLE_DAMAGE = 2;
const int SQUARE_SPEED = 3;
const int SQUARE_HEALTH = 20;
const int SQUARE_DAMAGE = 4;

// Main Tower
const int MAIN_TOWER_HEALTH = 10;

// Map Constants
const int MAP_WIDTH = 16;
const int MAP_HEIGHT = 8;

// Enemy tracking arrays - Simplified
int pos[NUM_ENEMIES] = {0, 0, 0, 0, 0, 0}; // Current position on path
int hp[NUM_ENEMIES] = {10, 10, 10, 20, 20, 20}; // Health points
int dmg[NUM_ENEMIES] = {2, 2, 2, 4, 4, 4}; // Damage value
int spawn_time[NUM_ENEMIES] = {0, 2, 4, 0, 3, 6}; // When enemies spawn
int time_on_map[NUM_ENEMIES] = {0, 0, 0, 0, 0, 0}; // Time spent on map

// Game state tracking
int lives = 10; // Main tower health
bool game_over = false;
bool timeout_reached = false;
int turn_counter = 0; // Discrete time counter

// Simplified path definition - single main path
const int PATH_LENGTH = 23;

// Helper Functions - Simplified

// Update enemy position (simplified without branching)
void update_enemy_position(int id) {
    pos[id] = pos[id] + 1;
}

// Check if enemy has reached the end of path
bool reached_path_end(int id) {
    return pos[id] &gt;= PATH_LENGTH - 1;
}

// Returns true if all enemies are either killed or have reached the goal
bool all_enemies_gone() {
    int i;
    for (i = 0; i &lt; NUM_ENEMIES; i++) {
        if (hp[i] &gt; 0 &amp;&amp; pos[i] &gt;= 0 &amp;&amp; pos[i] &lt; PATH_LENGTH)
            return false;
    }
    return true;
}

// Get the speed of the enemy based on its type
int get_enemy_speed(int enemy_id) {
    return (enemy_id &lt; 3) ? CIRCLE_SPEED : SQUARE_SPEED;
}

// Mark enemy as done (reached goal or killed)
void mark_enemy_done(int id) {
    pos[id] = -1;
}</declaration>
	<template>
		<name>TurnCounter</name>
		<declaration>// Turn-based timer that advances discrete turns
bool can_increment = true;</declaration>
		<location id="id0" x="0" y="0">
			<name x="-10" y="-34">Count</name>
		</location>
		<init ref="id0"/>
		<transition id="id1">
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="guard" x="-136" y="51">!game_over &amp;&amp; can_increment</label>
			<label kind="assignment" x="-136" y="85">turn_counter++, can_increment = false</label>
			<nail x="-102" y="68"/>
		</transition>
		<transition id="id2">
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="guard" x="17" y="51">!can_increment</label>
			<label kind="assignment" x="17" y="85">can_increment = true</label>
			<nail x="102" y="68"/>
		</transition>
	</template>
	<template>
		<name>EnemyTemplate</name>
		<parameter>int id</parameter>
		<declaration>// Enemy template
// Uses turn-based movement instead of real-time clocks</declaration>
		<location id="id3" x="-8" y="-323">
			<name x="-18" y="-357">Spawned</name>
		</location>
		<location id="id4" x="-280" y="-68">
			<name x="-290" y="-102">Moving</name>
		</location>
		<location id="id5" x="-153" y="255">
			<name x="-163" y="221">Goal</name>
		</location>
		<location id="id6" x="221" y="272">
			<name x="211" y="238">Killed</name>
		</location>
		<location id="id7" x="187" y="-331">
			<name x="177" y="-365">NotActive</name>
		</location>
		<init ref="id7"/>
		<transition id="id8">
			<source ref="id3"/>
			<target ref="id6"/>
			<label kind="guard" x="-296" y="-357">hp[id] &lt;= 0</label>
			<nail x="-314" y="-323"/>
			<nail x="-306" y="357"/>
			<nail x="221" y="348"/>
		</transition>
		<transition id="id9">
			<source ref="id7"/>
			<target ref="id3"/>
			<label kind="guard" x="8" y="-382">turn_counter &gt;= spawn_time[id]</label>
		</transition>
		<transition id="id10">
			<source ref="id4"/>
			<target ref="id6"/>
			<label kind="guard" x="-262" y="276">hp[id]&lt;=0</label>
			<label kind="assignment" x="-262" y="310">pos[id] = -1</label>
			<nail x="-280" y="314"/>
			<nail x="221" y="306"/>
		</transition>
		<transition id="id11">
			<source ref="id4"/>
			<target ref="id5"/>
			<label kind="guard" x="-262" y="59">turn_counter % get_enemy_speed(id) == 0 &amp;&amp; hp[id] &gt; 0 &amp;&amp; reached_path_end(id)</label>
			<label kind="assignment" x="-262" y="93">lives = lives - dmg[id], mark_enemy_done(id)</label>
		</transition>
		<transition id="id12">
			<source ref="id4"/>
			<target ref="id4"/>
			<label kind="guard" x="-301" y="-157">turn_counter % get_enemy_speed(id) == 0 &amp;&amp; hp[id] &gt; 0 &amp;&amp; pos[id] &lt; PATH_LENGTH - 1</label>
			<label kind="assignment" x="-301" y="-123">update_enemy_position(id), time_on_map[id] = time_on_map[id] + 1</label>
			<nail x="-323" y="-178"/>
			<nail x="-323" y="93"/>
		</transition>
		<transition id="id13">
			<source ref="id3"/>
			<target ref="id4"/>
			<label kind="guard" x="-263" y="-229">turn_counter &gt;= spawn_time[id] &amp;&amp; hp[id] &gt; 0</label>
			<label kind="assignment" x="-262" y="-195">pos[id] = 0, time_on_map[id] = 0</label>
		</transition>
	</template>
	<template>
		<name>GameMonitor</name>
		<declaration>// Game monitor template</declaration>
		<location id="id14" x="-25" y="-246">
			<name x="-35" y="-280">Wait</name>
		</location>
		<location id="id15" x="-221" y="-25">
			<name x="-231" y="-59">WinState</name>
			<committed/>
		</location>
		<location id="id16" x="161" y="-17">
			<name x="151" y="-51">LoseState</name>
			<committed/>
		</location>
		<location id="id17" x="-17" y="195">
			<name x="-27" y="161">TimeoutState</name>
			<committed/>
		</location>
		<location id="id18" x="-280" y="178">
			<name x="-290" y="144">Done</name>
		</location>
		<init ref="id14"/>
		<transition id="id19">
			<source ref="id16"/>
			<target ref="id18"/>
			<nail x="110" y="314"/>
		</transition>
		<transition id="id20">
			<source ref="id17"/>
			<target ref="id18"/>
		</transition>
		<transition id="id21">
			<source ref="id15"/>
			<target ref="id18"/>
		</transition>
		<transition id="id22">
			<source ref="id14"/>
			<target ref="id17"/>
			<label kind="guard" x="-21" y="-59">turn_counter &gt;= TIMEOUT</label>
			<label kind="assignment" x="-21" y="-25">game_over = true, timeout_reached = true</label>
		</transition>
		<transition id="id23">
			<source ref="id14"/>
			<target ref="id16"/>
			<label kind="guard" x="-7" y="-165">lives &lt;= 0</label>
			<label kind="assignment" x="-7" y="-131">game_over = true</label>
		</transition>
		<transition id="id24">
			<source ref="id14"/>
			<target ref="id15"/>
			<label kind="guard" x="-331" y="-238">all_enemies_gone() &amp;&amp; lives &gt; 0</label>
			<label kind="assignment" x="-297" y="-204">game_over = true</label>
		</transition>
	</template>
	<system>// Instantiate processes
turn = TurnCounter();
GM = GameMonitor();

E0 = EnemyTemplate(0);
E1 = EnemyTemplate(1);
E2 = EnemyTemplate(2);
E3 = EnemyTemplate(3);
E4 = EnemyTemplate(4);
E5 = EnemyTemplate(5);

// System without turrets (for properties I-V)
system turn, GM, E0, E1, E2, E3, E4, E5;</system>
	<queries>
		<query>
			<formula>A[] not deadlock</formula>
			<comment>Property I: The game never reaches a deadlock state</comment>
		</query>
		<query>
			<formula>E&lt;&gt; E0.Goal</formula>
			<comment>Property II (part 1): Enemy 0 can reach the Main Tower</comment>
			<result outcome="success" type="quality" timestamp="2025-04-30 19:31:11 +0200">
			</result>
		</query>
		<query>
			<formula>E&lt;&gt; E1.Goal</formula>
			<comment>Property II (part 2): Enemy 1 can reach the Main Tower</comment>
			<result outcome="success" type="quality" timestamp="2025-04-30 19:31:20 +0200">
			</result>
		</query>
		<query>
			<formula>E&lt;&gt; E2.Goal</formula>
			<comment>Property II (part 3): Enemy 2 can reach the Main Tower</comment>
			<result outcome="success" type="quality" timestamp="2025-04-30 19:31:32 +0200">
			</result>
		</query>
		<query>
			<formula>E&lt;&gt; E3.Goal</formula>
			<comment>Property II (part 4): Enemy 3 can reach the Main Tower</comment>
			<result outcome="success" type="quality" timestamp="2025-04-30 19:31:35 +0200">
			</result>
		</query>
		<query>
			<formula>E&lt;&gt; E4.Goal</formula>
			<comment>Property II (part 5): Enemy 4 can reach the Main Tower</comment>
			<result outcome="success" type="quality" timestamp="2025-04-30 19:31:42 +0200">
			</result>
		</query>
		<query>
			<formula>E&lt;&gt; E5.Goal</formula>
			<comment>Property II (part 6): Enemy 5 can reach the Main Tower</comment>
			<result outcome="success" type="quality" timestamp="2025-04-30 19:32:05 +0200">
			</result>
		</query>
		<query>
			<formula>A[] E0.Goal imply turn_counter &lt;= PATH_LENGTH*CIRCLE_SPEED + spawn_time[0]</formula>
			<comment>Property III (part 1): Circle 0 reaches the Main Tower in time</comment>
			<option key="--state-representation" value="0"/>
			<option key="--search-order" value="0"/>
			<option key="--statespace-consumption" value="2"/>
			<option key="--diagnostic" value="2"/>
		</query>
		<query>
			<formula>A[] E1.Goal imply turn_counter &lt;= PATH_LENGTH*CIRCLE_SPEED + spawn_time[1]</formula>
			<comment>Property III (part 2): Circle 1 reaches the Main Tower in time</comment>
		</query>
		<query>
			<formula>A[] E2.Goal imply turn_counter &lt;= PATH_LENGTH*CIRCLE_SPEED + spawn_time[2]</formula>
			<comment>Property III (part 3): Circle 2 reaches the Main Tower in time</comment>
		</query>
		<query>
			<formula>A[] E3.Goal imply turn_counter &lt;= PATH_LENGTH*SQUARE_SPEED + spawn_time[3]</formula>
			<comment>Property IV (part 1): Square 0 reaches the Main Tower in time</comment>
		</query>
		<query>
			<formula>A[] E4.Goal imply turn_counter &lt;= PATH_LENGTH*SQUARE_SPEED + spawn_time[4]</formula>
			<comment>Property IV (part 2): Square 1 reaches the Main Tower in time</comment>
		</query>
		<query>
			<formula>A[] E5.Goal imply turn_counter &lt;= PATH_LENGTH*SQUARE_SPEED + spawn_time[5]</formula>
			<comment>Property IV (part 3): Square 2 reaches the Main Tower in time</comment>
		</query>
		<query>
			<formula>A[] forall (i : int[0, NUM_ENEMIES-1]) (pos[i] &gt;= 0 &amp;&amp; pos[i] &lt; PATH_LENGTH) || pos[i] == -1</formula>
			<comment>Property V: All enemies never leave the red path</comment>
		</query>
	</queries>
</nta>
