<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
	<declaration>// Place global declarations here.
// Game Constants
const int NUM_ENEMIES = 700; // 3 Circles, 3 Squares
const int TIMEOUT = 100; // Game timeout in time units


// Enemy Parameters
const int CIRCLE_SPEED = 1;
const int CIRCLE_HEALTH = 10;
const int CIRCLE_DAMAGE = 2;
const int SQUARE_SPEED = 3;
const int SQUARE_HEALTH = 20;
const int SQUARE_DAMAGE = 4;

// Turret Parameters
const int BASIC_RANGE = 2;
const int BASIC_FIRE_SPEED = 2;
const int BASIC_DAMAGE = 2;
const int CANNON_RANGE = 1;
const int CANNON_FIRE_SPEED = 7;
const int CANNON_DAMAGE = 5;
const int SNIPER_RANGE = 4;
const int SNIPER_FIRE_SPEED = 20;
const int SNIPER_DAMAGE = 8;

// Main Tower
const int MAIN_TOWER_HEALTH = 100;

// Map Constants
const int MAP_WIDTH = 16;
const int MAP_HEIGHT = 8;

// Enemy tracking arrays
int pos[NUM_ENEMIES];        // Current position on path
int hp[NUM_ENEMIES];         // Health points
int dmg[NUM_ENEMIES];        // Damage value
int spawn_time[NUM_ENEMIES]; // When enemies spawn
int time_on_map[NUM_ENEMIES]; // Time spent on map
int path_choice[NUM_ENEMIES]; // Which path each enemy is on
int alt_pos[NUM_ENEMIES];    // Position on alternate paths
bool active[NUM_ENEMIES];    // Whether enemy is currently active in simulation

// Initialize arrays with proper values
void initialize_arrays() {
    int i;
    // Initialize the first 400 enemies as Circles
    for (i = 0; i &lt; NUM_ENEMIES; i++) {
        active[i] = false;
    }
    for (i = 0; i &lt; 400; i++) {
        pos[i] = 0;
        hp[i] = CIRCLE_HEALTH;
        dmg[i] = CIRCLE_DAMAGE;
        spawn_time[i] = i / 2; // Circles spawn every 2 time units
        time_on_map[i] = 0;
        path_choice[i] = 0;
        alt_pos[i] = 0;
    }
    
    // Initialize the remaining 300 enemies as Squares
    for (i = 400; i &lt; NUM_ENEMIES; i++) {
        pos[i] = 0;
        hp[i] = SQUARE_HEALTH;
        dmg[i] = SQUARE_DAMAGE;
        spawn_time[i] = (i - 400) / 3; // Squares spawn every 3 time units
        time_on_map[i] = 0;
        path_choice[i] = 0;
        alt_pos[i] = 0;
    }
}




// Game state tracking
int lives = 100; // Main tower health
bool game_over = false;
bool timeout_reached = false;
int global_clock;

// Coordinate structure for map positions
typedef struct {
  int x;
  int y;
} Coord;

// Main path definition
const int PATH_LENGTH = 23;
const Coord path[PATH_LENGTH] = {
    {0,0}, {1,0}, {2,0}, {3,0}, {4,0}, 
    {4,1}, {4,2}, {4,3}, {4,4}, {5,4},
    {6,4}, {7,4}, {8,4}, {8,5}, {8,6}, 
    {8,7}, {9,7}, {10,7}, {11,7}, {12,7}, 
    {13,7}, {14,7}, {15,4}
};

// Branch points and alternate paths
const int BRANCH_POINTS = 2;
const Coord branches[BRANCH_POINTS] = {{7,4}, {10,7}};

// Path from branch point 1 (position 7,4)
const int ALT_PATH1_LENGTH = 10;
const Coord alt_path1[ALT_PATH1_LENGTH] = {
    {7,3}, {7,2}, {7,1}, {8,1}, {9,1}, 
    {10,1}, {11,1}, {12,1}, {13,1}, {14,1}
};

// Path from branch point 2 (position 10,7)
const int ALT_PATH2_LENGTH = 5;
const Coord alt_path2[ALT_PATH2_LENGTH] = {
    {10,6}, {10,5}, {11,5}, {12,5}, {13,5}
};

// Track which path each enemy is on (0 = main path, 1 = alt_path1, 2 = alt_path2)



// Main tower position
const Coord mainTower = {15, 4};

// Turret configuration for verification
// Configuration VI from assignment
const int basic_x[1] = {5};
const int basic_y[1] = {5};
const int cannon_x[4] = {8, 8, 14, 14};
const int cannon_y[4] = {2, 6, 2, 6};
const int sniper_x[2] = {2, 11};
const int sniper_y[2] = {3, 5};

// Custom Configurations for part VIII
// Configuration 1
const int config1_basic_x[2] = {5, 11};
const int config1_basic_y[2] = {5, 2};
const int config1_cannon_x[1] = {8};
const int config1_cannon_y[1] = {6};
const int config1_sniper_x[1] = {14};
const int config1_sniper_y[1] = {2};

// Configuration 2
const int config2_basic_x[1] = {2};
const int config2_basic_y[1] = {3};
const int config2_cannon_x[2] = {8, 14};
const int config2_cannon_y[2] = {2, 6};
const int config2_sniper_x[1] = {11};
const int config2_sniper_y[1] = {5};

// Helper Functions

// Manhattan distance between coordinates
int distance(int x1, int y1, int x2, int y2) {
    return abs(x1-x2) + abs(y1-y2);
}

Coord get_enemy_position(int enemy_id) {
    Coord dummy = {-1, -1}; // return something safe

    if (hp[enemy_id] &lt;= 0)
        return dummy;

    if (path_choice[enemy_id] == 0 &amp;&amp; pos[enemy_id] &gt;= 0 &amp;&amp; pos[enemy_id] &lt; PATH_LENGTH)
        return path[pos[enemy_id]];

    if (path_choice[enemy_id] == 1 &amp;&amp; alt_pos[enemy_id] &gt;= 0 &amp;&amp; alt_pos[enemy_id] &lt; ALT_PATH1_LENGTH)
        return alt_path1[alt_pos[enemy_id]];

    if (path_choice[enemy_id] == 2 &amp;&amp; alt_pos[enemy_id] &gt;= 0 &amp;&amp; alt_pos[enemy_id] &lt; ALT_PATH2_LENGTH)
        return alt_path2[alt_pos[enemy_id]];

    return dummy; // fallback for invalid cases
}


// Check if enemy is in range of turret
bool in_range(int enemy_id, int turret_x, int turret_y, int range) {
    

    Coord enemy_pos = get_enemy_position(enemy_id);
    return distance(enemy_pos.x, enemy_pos.y, turret_x, turret_y) &lt;= range;
}

// Returns true if at least one enemy is in range of a turret
bool target_available(int tx, int ty, int range) {
    int i;
    for (i = 0; i &lt; NUM_ENEMIES; i++) {
        if (hp[i] &gt; 0 &amp;&amp; pos[i] &gt;= 0 &amp;&amp; in_range(i, tx, ty, range)) {
            return true;
        }
    }
    return false;
}

// Find highest priority target and damage it
void fire(int tx, int ty, int damage, int range) {
    int best_target = -1;
    int i;
    
    // First check squares (enemies 3-5)
    for (i = 3; i &lt; NUM_ENEMIES; i++) {
        if (hp[i] &gt; 0 &amp;&amp; pos[i] &gt;= 0) {
            Coord enemy_pos = get_enemy_position(i);
            int d = distance(enemy_pos.x, enemy_pos.y, tx, ty);
            
            if (d &lt;= range &amp;&amp; (best_target == -1 || time_on_map[i] &lt; time_on_map[best_target])) {
                best_target = i;
            }
        }
    }
    
    // If no squares, check circles (enemies 0-2)
    if (best_target == -1) {
        for (i = 0; i &lt; 3; i++) {
            if (hp[i] &gt; 0 &amp;&amp; pos[i] &gt;= 0) {
                Coord enemy_pos = get_enemy_position(i);
                int d = distance(enemy_pos.x, enemy_pos.y, tx, ty);
                
                if (d &lt;= range &amp;&amp; (best_target == -1 || time_on_map[i] &lt; time_on_map[best_target])) {
                    best_target = i;
                }
            }
        }
    }
    
    // Apply damage
    if (best_target != -1) {
        hp[best_target] = hp[best_target] - damage;
    }
}

// Returns true if all enemies are either killed or have reached the goal
bool all_enemies_gone() {
    int i;
    for (i = 0; i &lt; NUM_ENEMIES; i++) {

        /* main path still on map? */
        if (path_choice[i] == 0 &amp;&amp;
            pos[i] &gt;= 0 &amp;&amp; pos[i] &lt; PATH_LENGTH)
            return false;

        /* alt path 1 still on map? */
        if (path_choice[i] == 1 &amp;&amp;
            alt_pos[i] &gt;= 0 &amp;&amp; alt_pos[i] &lt; ALT_PATH1_LENGTH)
            return false;

        /* alt path 2 still on map? */
        if (path_choice[i] == 2 &amp;&amp;
            alt_pos[i] &gt;= 0 &amp;&amp; alt_pos[i] &lt; ALT_PATH2_LENGTH)
            return false;
    }
    return true;        /* every enemy is really off‑map */
}




// Check if position is a branch point
bool is_branch_point(int x, int y) {
    int i;
    for (i = 0; i &lt; BRANCH_POINTS; i++) {
        if (branches[i].x == x &amp;&amp; branches[i].y == y) {
            return true;
        }
    }
    return false;
}

// Update enemy position based on current path
void update_enemy_position(int id) {
    if (path_choice[id] == 0) {
        // Main path
        pos[id] = pos[id] + 1;
    } else if (path_choice[id] == 1) {
        // Alternate path 1
        alt_pos[id] = alt_pos[id] + 1;
    } else {
        // Alternate path 2
        alt_pos[id] = alt_pos[id] + 1;
    }
}

// Check if enemy has reached the end of its path
bool reached_path_end(int id) {
    if (path_choice[id] == 0) {
        return pos[id] &gt;= PATH_LENGTH - 1;
    } else if (path_choice[id] == 1) {
        return alt_pos[id] &gt;= ALT_PATH1_LENGTH - 1;
    } else {
        return alt_pos[id] &gt;= ALT_PATH2_LENGTH - 1;
    }
}

int get_enemy_speed(int enemy_id) {
    return (enemy_id &lt; 3) ? CIRCLE_SPEED : SQUARE_SPEED;
}

bool can_move_forward(int enemy_id) {
    Coord pos = get_enemy_position(enemy_id);
    return !is_branch_point(pos.x, pos.y) &amp;&amp; !reached_path_end(enemy_id);
}



// Get the speed of the enemy based on its type


// Check if an enemy position is at a branch point
bool is_at_branch(int enemy_id) {
    Coord pos = get_enemy_position(enemy_id);
    return is_branch_point(pos.x, pos.y);
}

// Check if an enemy has reached the end of its path
bool has_reached_end(int enemy_id) {
    return reached_path_end(enemy_id);
}

// Check if enemy can move forward
bool can_move(int enemy_id) {
    return hp[enemy_id] &gt; 0 &amp;&amp; !is_at_branch(enemy_id) &amp;&amp; !has_reached_end(enemy_id);
}

// Check if enemy is alive and at a branch point
bool can_branch(int enemy_id) {
    return hp[enemy_id] &gt; 0 &amp;&amp; is_at_branch(enemy_id);
}

// Check if enemy is stuck (can't move forward, not at branch, hasn't reached end)
bool is_stuck(int enemy_id) {
    return hp[enemy_id] &gt; 0 &amp;&amp; 
           !is_at_branch(enemy_id) &amp;&amp; 
           !has_reached_end(enemy_id) &amp;&amp; 
           !can_move_forward(enemy_id);
}

void mark_enemy_done(int id) {
    if (path_choice[id] == 0)
        pos[id] = -1;
    else
        alt_pos[id] = -1;
}


</declaration>
	<template>
		<name>SniperTurret</name>
		<parameter>int x,int y</parameter>
		<declaration>clock t;
const int RANGE = SNIPER_RANGE;
const int FIRE_RATE = SNIPER_FIRE_SPEED;
const int DAMAGE = SNIPER_DAMAGE;

// Calculate fire rate as a ratio (r:q format)
int get_fire_rate_numerator() {
    return 1;
}

int get_fire_rate_denominator() {
    return FIRE_RATE;
}</declaration>
		<location id="id0" x="-42" y="-255">
			<name x="-52" y="-289">Idle</name>
			<label kind="exponentialrate" x="-52" y="-221">get_fire_rate_numerator():get_fire_rate_denominator()</label>
		</location>
		<location id="id1" x="-42" y="25">
			<name x="-52" y="-9">Firing</name>
			<label kind="exponentialrate" x="-52" y="59">1</label>
		</location>
		<init ref="id0"/>
		<transition id="id2">
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="guard" x="-211" y="-9">true</label>
			<nail x="-229" y="25"/>
		</transition>
		<transition id="id3">
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="-42" y="-149">t &gt;= FIRE_RATE &amp;&amp; target_available(x, y, RANGE)</label>
			<label kind="assignment" x="-42" y="-115">t = 0, fire(x, y, DAMAGE, RANGE)</label>
		</transition>
	</template>
	<template>
		<name>CannonTurret</name>
		<parameter>int x,int y</parameter>
		<declaration>clock t;
const int RANGE = CANNON_RANGE;
const int FIRE_RATE = CANNON_FIRE_SPEED;
const int DAMAGE = CANNON_DAMAGE;

// Calculate fire rate as a ratio (r:q format)
int get_fire_rate_numerator() {
    return 1;
}

int get_fire_rate_denominator() {
    return FIRE_RATE;
}</declaration>
		<location id="id4" x="-153" y="-416">
			<name x="-163" y="-450">Idle</name>
			<label kind="exponentialrate" x="-163" y="-382">get_fire_rate_numerator():get_fire_rate_denominator()</label>
		</location>
		<location id="id5" x="-144" y="-170">
			<name x="-154" y="-204">Firing</name>
			<label kind="exponentialrate" x="-154" y="-136">1</label>
		</location>
		<init ref="id4"/>
		<transition id="id6">
			<source ref="id5"/>
			<target ref="id4"/>
			<label kind="guard" x="-322" y="-204">true</label>
			<nail x="-340" y="-170"/>
		</transition>
		<transition id="id7">
			<source ref="id4"/>
			<target ref="id5"/>
			<label kind="guard" x="-148" y="-327">t &gt;= FIRE_RATE &amp;&amp; target_available(x, y, RANGE)</label>
			<label kind="assignment" x="-148" y="-293">t = 0, fire(x, y, DAMAGE, RANGE)</label>
		</transition>
	</template>
	<template>
		<name>BasicTurret</name>
		<parameter>int x, int y</parameter>
		<declaration>clock t;
const int RANGE = BASIC_RANGE;
const int FIRE_RATE = BASIC_FIRE_SPEED;
const int DAMAGE = BASIC_DAMAGE;

// Calculate fire rate as a ratio (r:q format)
int get_fire_rate_numerator() {
    return 1;
}

int get_fire_rate_denominator() {
    return FIRE_RATE;
}</declaration>
		<location id="id8" x="-42" y="-280">
			<name x="-61" y="-314">Idle</name>
			<label kind="exponentialrate" x="-52" y="-246">get_fire_rate_numerator():get_fire_rate_denominator()</label>
		</location>
		<location id="id9" x="-42" y="-102">
			<name x="-52" y="-136">Firing</name>
			<label kind="exponentialrate" x="-52" y="-68">1</label>
		</location>
		<init ref="id8"/>
		<transition id="id10">
			<source ref="id9"/>
			<target ref="id8"/>
			<label kind="guard" x="-160" y="-136">true</label>
			<nail x="-178" y="-102"/>
		</transition>
		<transition id="id11">
			<source ref="id8"/>
			<target ref="id9"/>
			<label kind="guard" x="-42" y="-225">t &gt;= FIRE_RATE &amp;&amp; target_available(x, y, RANGE)</label>
			<label kind="assignment" x="-42" y="-191">t = 0, fire(x, y, DAMAGE, RANGE)</label>
		</transition>
	</template>
	<template>
		<name>EnemyTemplate</name>
		<parameter>int id</parameter>
		<declaration>
clock clk;
clock clk_global_sync;


// Calculate enemy rate as a ratio (r:q format)
// Where r is the numerator and q is the denominator
int get_enemy_speed_numerator(int enemy_id) {
    return (enemy_id &lt; 400) ? CIRCLE_SPEED : SQUARE_SPEED;
}

int get_enemy_speed_denominator(int enemy_id) {
    return 10;
}</declaration>
		<location id="id12" x="-8" y="-323">
			<name x="-18" y="-357">Spawned</name>
			<label kind="exponentialrate" x="-18" y="-289">1</label>
		</location>
		<location id="id13" x="-280" y="-68">
			<name x="-290" y="-102">Moving</name>
			<label kind="exponentialrate" x="-290" y="-34">get_enemy_speed_numerator(id):get_enemy_speed_denominator(id)</label>
		</location>
		<location id="id14" x="255" y="-42">
			<name x="245" y="-76">AtBranch</name>
			<label kind="exponentialrate" x="245" y="-8">1</label>
		</location>
		<location id="id15" x="-153" y="255">
			<name x="-163" y="221">Goal</name>
			<label kind="exponentialrate" x="-163" y="289">1</label>
		</location>
		<location id="id16" x="221" y="272">
			<name x="211" y="238">Killed</name>
			<label kind="exponentialrate" x="211" y="306">1</label>
		</location>
		<location id="id17" x="187" y="-331">
			<name x="177" y="-365">NotActive</name>
			<label kind="exponentialrate" x="177" y="-297">1</label>
		</location>
		<init ref="id17"/>
		<transition id="id18">
			<source ref="id12"/>
			<target ref="id16"/>
			<label kind="guard" x="-296" y="-357">hp[id] &lt;= 0</label>
			<nail x="-314" y="-323"/>
			<nail x="-306" y="357"/>
			<nail x="221" y="348"/>
		</transition>
		<transition id="id19">
			<source ref="id17"/>
			<target ref="id12"/>
			<label kind="guard" x="8" y="-382">global_clock &gt;= spawn_time[id]</label>
		</transition>
		<transition id="id20">
			<source ref="id13"/>
			<target ref="id16"/>
			<label kind="guard" x="-262" y="276">hp[id]&lt;=0</label>
			<label kind="assignment" x="-262" y="310">clk = 0, pos[id] = -1</label>
			<nail x="-280" y="314"/>
			<nail x="221" y="306"/>
		</transition>
		<transition id="id21">
			<source ref="id13"/>
			<target ref="id15"/>
			<label kind="guard" x="-262" y="59">clk &gt;= get_enemy_speed(id) &amp;&amp; hp[id] &gt; 0 &amp;&amp; reached_path_end(id)</label>
			<label kind="assignment" x="-262" y="93">lives = lives - dmg[id], clk = 0, mark_enemy_done(id)</label>
		</transition>
		<transition id="id22">
			<source ref="id14"/>
			<target ref="id13"/>
			<label kind="guard" x="111" y="21">true</label>
			<label kind="assignment" x="111" y="55">clk = 0, path_choice[id] = 2, alt_pos[id] = 0</label>
			<nail x="93" y="153"/>
		</transition>
		<transition id="id23">
			<source ref="id14"/>
			<target ref="id13"/>
			<label kind="guard" x="103" y="4">true</label>
			<label kind="assignment" x="103" y="38">clk = 0, path_choice[id] = 1, alt_pos[id] = 0</label>
			<nail x="85" y="119"/>
		</transition>
		<transition id="id24">
			<source ref="id14"/>
			<target ref="id13"/>
			<label kind="guard" x="94" y="-21">true</label>
			<label kind="assignment" x="94" y="13">clk = 0, path_choice[id] = 0, update_enemy_position(id)</label>
			<nail x="76" y="68"/>
		</transition>
		<transition id="id25">
			<source ref="id13"/>
			<target ref="id14"/>
			<label kind="guard" x="-262" y="-64">clk &gt;= get_enemy_speed(id) &amp;&amp; can_branch(id)</label>
			<label kind="assignment" x="-262" y="-30">clk = 0, time_on_map[id] = time_on_map[id] + 1</label>
			<nail x="51" y="8"/>
		</transition>
		<transition id="id26">
			<source ref="id13"/>
			<target ref="id13"/>
			<label kind="guard" x="-301" y="-157">clk &gt;= get_enemy_speed(id) &amp;&amp; can_move(id)</label>
			<label kind="assignment" x="-301" y="-123">update_enemy_position(id), time_on_map[id] = time_on_map[id] + 1</label>
			<nail x="-323" y="-178"/>
			<nail x="-323" y="93"/>
		</transition>
		<transition id="id27">
			<source ref="id12"/>
			<target ref="id13"/>
			<label kind="guard" x="-263" y="-229">global_clock &gt;= spawn_time[id] &amp;&amp; hp[id] &gt; 0</label>
			<label kind="assignment" x="-262" y="-195">pos[id] = 0, time_on_map[id] = 0</label>
		</transition>
	</template>
	<template>
		<name>GameMonitor</name>
		<location id="id28" x="-25" y="-246">
			<name x="-35" y="-280">Wait</name>
		</location>
		<location id="id29" x="-221" y="-25">
			<name x="-231" y="-59">WinState</name>
			<committed/>
		</location>
		<location id="id30" x="161" y="-17">
			<name x="151" y="-51">LoseState</name>
			<committed/>
		</location>
		<location id="id31" x="-17" y="195">
			<name x="-27" y="161">TimeoutState</name>
			<committed/>
		</location>
		<location id="id32" x="-280" y="178">
			<name x="-290" y="144">Done</name>
		</location>
		<init ref="id28"/>
		<transition id="id33">
			<source ref="id30"/>
			<target ref="id32"/>
			<nail x="110" y="314"/>
		</transition>
		<transition id="id34">
			<source ref="id31"/>
			<target ref="id32"/>
		</transition>
		<transition id="id35">
			<source ref="id29"/>
			<target ref="id32"/>
		</transition>
		<transition id="id36">
			<source ref="id28"/>
			<target ref="id31"/>
			<label kind="guard" x="-21" y="-59">!game_over &amp;&amp; timeout_reached</label>
			<label kind="assignment" x="-21" y="-25">game_over = true</label>
		</transition>
		<transition id="id37">
			<source ref="id28"/>
			<target ref="id30"/>
			<label kind="guard" x="-7" y="-165">lives &lt;= 0 &amp;&amp; all_enemies_gone()</label>
			<label kind="assignment" x="-7" y="-131">game_over = true</label>
		</transition>
		<transition id="id38">
			<source ref="id28"/>
			<target ref="id29"/>
			<label kind="guard" x="-331" y="-238">all_enemies_gone()                  &amp;&amp;
lives &gt; 0</label>
			<label kind="assignment" x="-297" y="-204">game_over = true</label>
		</transition>
	</template>
	<template>
		<name x="5" y="5">ClockTick</name>
		<declaration>
// ClockTick Template:
// This template manages the game's global time and can determine when the timeout is reached

// No local declarations needed since we're using global_clock
clock c;</declaration>
		<location id="id39" x="0" y="0">
			<name x="-10" y="-34">Tick</name>
			<label kind="invariant" x="-10" y="17">c &lt;= 1</label>
		</location>
		<location id="id40" x="-34" y="-127">
			<name x="-44" y="-161">Initialize</name>
			<committed/>
		</location>
		<init ref="id40"/>
		<transition id="id41">
			<source ref="id40"/>
			<target ref="id39"/>
			<label kind="assignment" x="-17" y="-63">initialize_arrays()</label>
		</transition>
		<transition id="id42">
			<source ref="id39"/>
			<target ref="id39"/>
			<label kind="guard" x="-160" y="59">c &gt;= 1 &amp;&amp; global_clock &lt; TIMEOUT</label>
			<label kind="assignment" x="-160" y="93">c = 0, global_clock++</label>
			<nail x="0" y="187"/>
			<nail x="-178" y="0"/>
		</transition>
	</template>
	<system>
clock1 = ClockTick();
GM = GameMonitor();

E0 = EnemyTemplate(0);
E1 = EnemyTemplate(1);
E2 = EnemyTemplate(2);
E3 = EnemyTemplate(3);
E4 = EnemyTemplate(4);
E5 = EnemyTemplate(5);

Basic1 = BasicTurret(basic_x[0], basic_y[0]);
Cannon1 = CannonTurret(cannon_x[0], cannon_y[0]);
Cannon2 = CannonTurret(cannon_x[1], cannon_y[1]);
Cannon3 = CannonTurret(cannon_x[2], cannon_y[2]);
Cannon4 = CannonTurret(cannon_x[3], cannon_y[3]);
Sniper1 = SniperTurret(sniper_x[0], sniper_y[0]);
Sniper2 = SniperTurret(sniper_x[1], sniper_y[1]);



system clock1, E0, E1, E2, E3, E4, E5, Basic1, Cannon1, Cannon2, Cannon3, Cannon4, Sniper1, Sniper2, GM;
</system>
	<queries>
		<query>
			<formula>A[] not deadlock</formula>
			<comment/>
			<option key="--diagnostic" value="0"/>
		</query>
		<query>
			<formula>E&lt;&gt; E0.Goal &amp;&amp; E1.Goal &amp;&amp; E2.Goal &amp;&amp; E3.Goal &amp;&amp; E4.Goal &amp;&amp; E5.Goal



</formula>
			<comment/>
			<option key="--statespace-consumption" value="1"/>
		</query>
		<query>
			<formula>A&lt;&gt; (E0.Goal &amp;&amp; global_clock &lt;= 23)
 
</formula>
			<comment/>
			<result outcome="failure" type="quality" timestamp="2025-04-21 16:22:29 +0200">
			</result>
		</query>
		<query>
			<formula>A[] forall (i : int[0, NUM_ENEMIES-1]) 
    (pos[i] &gt;= 0 &amp;&amp; pos[i] &lt; PATH_LENGTH) ||  
    (path_choice[i] == 1 &amp;&amp; alt_pos[i] &gt;= 0 &amp;&amp; alt_pos[i] &lt; ALT_PATH1_LENGTH) || 
    (path_choice[i] == 2 &amp;&amp; alt_pos[i] &gt;= 0 &amp;&amp; alt_pos[i] &lt; ALT_PATH2_LENGTH) || 
    pos[i] == -1</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2025-04-21 16:26:47 +0200">
			</result>
		</query>
		<query>
			<formula>E&lt;&gt; GM.WinState</formula>
			<comment/>
		</query>
		<query>
			<formula>simulate[&lt;=200;100] {lives, global_clock}
</formula>
			<comment/>
		</query>
	</queries>
</nta>
