<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
	<declaration>// Place global declarations here.
const int NUM_CIRCLES = 400;
const int NUM_SQUARES = 300;
const int NUM_ENEMIES = NUM_CIRCLES + NUM_SQUARES;


int pos[NUM_ENEMIES];
int hp[700] = {
  10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
  10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
  10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
  10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
  10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
  10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
  10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
  10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
  10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
  10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
  10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
  10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
  10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
  10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
  10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
  10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
  10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
  10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
  10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
  10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
  10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
  10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
  10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
  10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
  10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
  10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
  10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
  10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
  10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
  10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
  10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
  10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
  10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
  10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
  10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
  10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
  10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
  10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
  10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
  10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
  20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
  20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
  20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
  20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
  20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
  20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
  20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
  20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
  20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
  20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
  20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
  20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
  20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
  20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
  20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
  20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
  20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
  20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
  20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
  20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
  20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
  20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
  20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
  20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
  20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
  20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
  20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
  20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
  20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
  20, 20, 20, 20, 20, 20, 20, 20, 20, 20
};

int dmg[700] = {
  2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
  2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
  2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
  2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
  2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
  2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
  2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
  2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
  2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
  2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
  2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
  2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
  2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
  2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
  2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
  2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
  2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
  2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
  2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
  2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
  2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
  2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
  2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
  2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
  2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
  2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
  2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
  2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
  2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
  2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
  2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
  2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
  2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
  2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
  2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
  2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
  2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
  2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
  2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
  2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
  4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
  4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
  4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
  4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
  4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
  4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
  4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
  4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
  4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
  4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
  4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
  4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
  4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
  4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
  4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
  4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
  4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
  4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
  4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
  4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
  4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
  4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
  4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
  4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
  4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
  4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
  4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
  4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
  4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
  4, 4, 4, 4, 4, 4, 4, 4, 4, 4
};

int speed[700] = {
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
  3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
  3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
  3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
  3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
  3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
  3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
  3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
  3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
  3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
  3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
  3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
  3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
  3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
  3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
  3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
  3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
  3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
  3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
  3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
  3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
  3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
  3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
  3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
  3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
  3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
  3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
  3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
  3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
  3, 3, 3, 3, 3, 3, 3, 3, 3, 3
};


typedef struct {
  int x;
  int y;
} Coord;

const int PATH_LENGTH = 23;
const Coord path[PATH_LENGTH] = {
    {0,0}, {1,0}, {2,0}, {3,0}, {4,0}, 
    {4,1}, {4,2}, {4,3}, {4,4}, {5,4},
    {6,4}, {7,4}, {8,4}, {8,5}, {8,6}, 
    {8,7}, {9,7}, {10,7}, {11,7}, {12,7}, 
    {13,7}, {14,7}, {15,7}
};

const Coord mainTower = {15, 7};

clock clk;
int position = 0; // current position on path




int lives = 10;

// === Configuration VI: Assignment ===
const int basic_x[1] = {5};
const int basic_y[1] = {5};

const int cannon_x[4] = {8, 8, 14, 14};
const int cannon_y[4] = {2, 6, 2, 6};

const int sniper_x[2] = {2, 11};
const int sniper_y[2] = {3, 5};


int turret_count = 0;


</declaration>
	<template>
		<name>BasicTurret</name>
		<parameter>int x, int y</parameter>
		<declaration>clock t;
const int FIRE_RATE = 2;
const int RANGE = 3;
const int DAMAGE = 2;
</declaration>
		<location id="id0" x="0" y="0">
			<name x="-10" y="-34">Idle</name>
			<label kind="exponentialrate" x="-10" y="34">1/FIRE_RATE</label>
		</location>
		<location id="id1" x="0" y="144">
			<name x="-10" y="110">Firing</name>
		</location>
		<init ref="id0"/>
		<transition id="id2">
			<source ref="id1"/>
			<target ref="id0"/>
			<nail x="-153" y="144"/>
		</transition>
		<transition id="id3">
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="assignment" x="0" y="72">t = 0,
hp[0] = (hp[0] &gt; 0 &amp;&amp; abs(path[pos[0]].x - x) + abs(path[pos[0]].y - y) &lt;= RANGE) ? hp[0] - DAMAGE : hp[0],
hp[1] = (hp[1] &gt; 0 &amp;&amp; abs(path[pos[1]].x - x) + abs(path[pos[1]].y - y) &lt;= RANGE) ? hp[1] - DAMAGE : hp[1],
hp[2] = (hp[2] &gt; 0 &amp;&amp; abs(path[pos[2]].x - x) + abs(path[pos[2]].y - y) &lt;= RANGE) ? hp[2] - DAMAGE : hp[2],
hp[3] = (hp[3] &gt; 0 &amp;&amp; abs(path[pos[3]].x - x) + abs(path[pos[3]].y - y) &lt;= RANGE) ? hp[3] - DAMAGE : hp[3],
hp[4] = (hp[4] &gt; 0 &amp;&amp; abs(path[pos[4]].x - x) + abs(path[pos[4]].y - y) &lt;= RANGE) ? hp[4] - DAMAGE : hp[4],
hp[5] = (hp[5] &gt; 0 &amp;&amp; abs(path[pos[5]].x - x) + abs(path[pos[5]].y - y) &lt;= RANGE) ? hp[5] - DAMAGE : hp[5]</label>
		</transition>
	</template>
	<template>
		<name>CannonTurret</name>
		<parameter>int x, int y</parameter>
		<declaration>clock t;
const int FIRE_RATE = 4;
const int RANGE = 6;
const int DAMAGE = 6;
</declaration>
		<location id="id4" x="0" y="0">
			<name x="-10" y="-34">Idle</name>
			<label kind="invariant" x="-10" y="17">1/FIRE_RATE</label>
		</location>
		<location id="id5" x="0" y="153">
			<name x="-10" y="119">Firing</name>
		</location>
		<init ref="id4"/>
		<transition id="id6">
			<source ref="id5"/>
			<target ref="id4"/>
			<nail x="-187" y="153"/>
		</transition>
		<transition id="id7">
			<source ref="id4"/>
			<target ref="id5"/>
			<label kind="assignment" x="0" y="76">t = 0,
hp[0] = (hp[0] &gt; 0 &amp;&amp; abs(path[pos[0]].x - x) + abs(path[pos[0]].y - y) &lt;= RANGE) ? hp[0] - DAMAGE : hp[0],
hp[1] = (hp[1] &gt; 0 &amp;&amp; abs(path[pos[1]].x - x) + abs(path[pos[1]].y - y) &lt;= RANGE) ? hp[1] - DAMAGE : hp[1],
hp[2] = (hp[2] &gt; 0 &amp;&amp; abs(path[pos[2]].x - x) + abs(path[pos[2]].y - y) &lt;= RANGE) ? hp[2] - DAMAGE : hp[2],
hp[3] = (hp[3] &gt; 0 &amp;&amp; abs(path[pos[3]].x - x) + abs(path[pos[3]].y - y) &lt;= RANGE) ? hp[3] - DAMAGE : hp[3],
hp[4] = (hp[4] &gt; 0 &amp;&amp; abs(path[pos[4]].x - x) + abs(path[pos[4]].y - y) &lt;= RANGE) ? hp[4] - DAMAGE : hp[4],
hp[5] = (hp[5] &gt; 0 &amp;&amp; abs(path[pos[5]].x - x) + abs(path[pos[5]].y - y) &lt;= RANGE) ? hp[5] - DAMAGE : hp[5]</label>
		</transition>
	</template>
	<template>
		<name>SniperTurret</name>
		<parameter>int x, int y</parameter>
		<declaration>clock t;
const int FIRE_RATE = 10;
const int RANGE = 8;
const int DAMAGE = 10;
</declaration>
		<location id="id8" x="0" y="0">
			<name x="-10" y="-34">Idle</name>
			<label kind="exponentialrate" x="-10" y="34">1/FIRE_RATE</label>
		</location>
		<location id="id9" x="0" y="110">
			<name x="-10" y="76">Firing</name>
		</location>
		<init ref="id8"/>
		<transition id="id10">
			<source ref="id9"/>
			<target ref="id8"/>
			<nail x="-136" y="110"/>
		</transition>
		<transition id="id11">
			<source ref="id8"/>
			<target ref="id9"/>
			<label kind="assignment" x="0" y="55">t = 0,
hp[0] = (hp[0] &gt; 0 &amp;&amp; abs(path[pos[0]].x - x) + abs(path[pos[0]].y - y) &lt;= RANGE) ? hp[0] - DAMAGE : hp[0],
hp[1] = (hp[1] &gt; 0 &amp;&amp; abs(path[pos[1]].x - x) + abs(path[pos[1]].y - y) &lt;= RANGE) ? hp[1] - DAMAGE : hp[1],
hp[2] = (hp[2] &gt; 0 &amp;&amp; abs(path[pos[2]].x - x) + abs(path[pos[2]].y - y) &lt;= RANGE) ? hp[2] - DAMAGE : hp[2],
hp[3] = (hp[3] &gt; 0 &amp;&amp; abs(path[pos[3]].x - x) + abs(path[pos[3]].y - y) &lt;= RANGE) ? hp[3] - DAMAGE : hp[3],
hp[4] = (hp[4] &gt; 0 &amp;&amp; abs(path[pos[4]].x - x) + abs(path[pos[4]].y - y) &lt;= RANGE) ? hp[4] - DAMAGE : hp[4],
hp[5] = (hp[5] &gt; 0 &amp;&amp; abs(path[pos[5]].x - x) + abs(path[pos[5]].y - y) &lt;= RANGE) ? hp[5] - DAMAGE : hp[5]</label>
		</transition>
	</template>
	<template>
		<name>GameMonitor</name>
		<location id="id12" x="0" y="0">
			<name x="-10" y="-34">Wait</name>
		</location>
		<location id="id13" x="-8" y="110">
			<name x="-18" y="76">Done</name>
		</location>
		<init ref="id12"/>
		<transition id="id14">
			<source ref="id12"/>
			<target ref="id13"/>
			<label kind="guard" x="-4" y="21">forall (i:int[0,5]) (hp[i] == 0 || (pos[i] == PATH_LENGTH - 1 &amp;&amp; hp[i] &gt; 0))</label>
		</transition>
	</template>
	<template>
		<name>ClockTick</name>
		<declaration>clock tt;</declaration>
		<location id="id15" x="0" y="0">
			<name x="-10" y="-34">Tick</name>
			<label kind="invariant" x="-10" y="17">tt&lt;=1</label>
		</location>
		<init ref="id15"/>
		<transition id="id16">
			<source ref="id15"/>
			<target ref="id15"/>
			<label kind="guard" x="-118" y="-5">tt==1</label>
			<label kind="assignment" x="-118" y="29">tt=0</label>
			<nail x="0" y="59"/>
			<nail x="-136" y="0"/>
		</transition>
	</template>
	<template>
		<name>TurretAI</name>
		<parameter>int x, int y</parameter>
		<declaration>clock t;
const int FIRE_RATE = 2; // basic
const int RANGE = 2;
const int DAMAGE = 2;
</declaration>
		<location id="id17" x="0" y="0">
			<name x="-10" y="-34">Idle</name>
			<label kind="exponentialrate" x="-10" y="34">FIRE_RATE</label>
		</location>
		<location id="id18" x="0" y="85">
			<name x="-10" y="51">Firing</name>
			<label kind="exponentialrate" x="-10" y="119">1.0</label>
		</location>
		<init ref="id17"/>
		<transition id="id19">
			<source ref="id18"/>
			<target ref="id17"/>
			<label kind="assignment" x="-118" y="89">turret_count--</label>
			<nail x="-136" y="93"/>
		</transition>
		<transition id="id20">
			<source ref="id17"/>
			<target ref="id18"/>
			<label kind="guard" x="25" y="-17">t&gt;=FIRE_RATE</label>
			<label kind="assignment" x="263" y="-51">t = 0,
t = 0,
hp[0] = (hp[0] &gt; 0 &amp;&amp; abs(path[pos[0]].x - x) + abs(path[pos[0]].y - y) &lt;= RANGE) ? hp[0] - DAMAGE : hp[0],
hp[1] = (hp[1] &gt; 0 &amp;&amp; abs(path[pos[1]].x - x) + abs(path[pos[1]].y - y) &lt;= RANGE) ? hp[1] - DAMAGE : hp[1],
hp[2] = (hp[2] &gt; 0 &amp;&amp; abs(path[pos[2]].x - x) + abs(path[pos[2]].y - y) &lt;= RANGE) ? hp[2] - DAMAGE : hp[2],
hp[3] = (hp[3] &gt; 0 &amp;&amp; abs(path[pos[3]].x - x) + abs(path[pos[3]].y - y) &lt;= RANGE) ? hp[3] - DAMAGE : hp[3],
hp[4] = (hp[4] &gt; 0 &amp;&amp; abs(path[pos[4]].x - x) + abs(path[pos[4]].y - y) &lt;= RANGE) ? hp[4] - DAMAGE : hp[4],
hp[5] = (hp[5] &gt; 0 &amp;&amp; abs(path[pos[5]].x - x) + abs(path[pos[5]].y - y) &lt;= RANGE) ? hp[5] - DAMAGE : hp[5]</label>
		</transition>
	</template>
	<template>
		<name>EnemyTemplate</name>
		<parameter>const int id</parameter>
		<declaration>clock clk;
int local_pos = 0;
</declaration>
		<location id="id21" x="0" y="0">
			<name x="-10" y="-34">Spawned</name>
		</location>
		<location id="id22" x="-68" y="68">
			<name x="-78" y="34">Moving</name>
			<label kind="exponentialrate" x="-78" y="102">speed[id] / 10.0</label>
		</location>
		<location id="id23" x="297" y="-144">
			<name x="287" y="-178">Goal</name>
		</location>
		<location id="id24" x="-68" y="229">
			<name x="-78" y="195">Killed</name>
		</location>
		<init ref="id21"/>
		<transition id="id25">
			<source ref="id22"/>
			<target ref="id22"/>
			<label kind="guard" x="-50" y="29">clk&gt;=1 &amp;&amp; hp[id] &gt; 0 &amp;&amp; local_pos &lt; PATH_LENGTH - 1</label>
			<label kind="assignment" x="-50" y="63">clk = 0,
local_pos = local_pos + 1,
pos[id]=local_pos</label>
			<nail x="93" y="59"/>
			<nail x="42" y="93"/>
		</transition>
		<transition id="id26">
			<source ref="id22"/>
			<target ref="id24"/>
			<label kind="guard" x="-68" y="114">clk &gt;= 1 &amp;&amp; hp[id] == 0</label>
			<label kind="assignment" x="-68" y="148">pos[id] = local_pos</label>
		</transition>
		<transition id="id27">
			<source ref="id22"/>
			<target ref="id23"/>
			<label kind="guard" x="-50" y="-72">clk&gt;=1 &amp;&amp; hp[id] &gt; 0 &amp;&amp; local_pos == PATH_LENGTH - 1</label>
			<label kind="assignment" x="-50" y="-38">pos[id] = local_pos,
lives = lives - dmg[id]</label>
		</transition>
		<transition id="id28">
			<source ref="id21"/>
			<target ref="id22"/>
			<label kind="select" x="-59" y="-17">i : int[0,5]</label>
			<label kind="guard" x="-59" y="0">i == 0</label>
			<label kind="assignment" x="-59" y="34">clk=0</label>
		</transition>
	</template>
	<system>// Place template instantiations here.
E0 = EnemyTemplate(0);
E1 = EnemyTemplate(1);
E2 = EnemyTemplate(2);
E3 = EnemyTemplate(3);
E4 = EnemyTemplate(4);
E5 = EnemyTemplate(5);
E6 = EnemyTemplate(6);
E7 = EnemyTemplate(7);
E8 = EnemyTemplate(8);
E9 = EnemyTemplate(9);
E10 = EnemyTemplate(10);
E11 = EnemyTemplate(11);
E12 = EnemyTemplate(12);
E13 = EnemyTemplate(13);
E14 = EnemyTemplate(14);
E15 = EnemyTemplate(15);
E16 = EnemyTemplate(16);
E17 = EnemyTemplate(17);
E18 = EnemyTemplate(18);
E19 = EnemyTemplate(19);
E20 = EnemyTemplate(20);
E21 = EnemyTemplate(21);
E22 = EnemyTemplate(22);
E23 = EnemyTemplate(23);
E24 = EnemyTemplate(24);
E25 = EnemyTemplate(25);
E26 = EnemyTemplate(26);
E27 = EnemyTemplate(27);
E28 = EnemyTemplate(28);
E29 = EnemyTemplate(29);
E30 = EnemyTemplate(30);
E31 = EnemyTemplate(31);
E32 = EnemyTemplate(32);
E33 = EnemyTemplate(33);
E34 = EnemyTemplate(34);
E35 = EnemyTemplate(35);
E36 = EnemyTemplate(36);
E37 = EnemyTemplate(37);
E38 = EnemyTemplate(38);
E39 = EnemyTemplate(39);
E40 = EnemyTemplate(40);
E41 = EnemyTemplate(41);
E42 = EnemyTemplate(42);
E43 = EnemyTemplate(43);
E44 = EnemyTemplate(44);
E45 = EnemyTemplate(45);
E46 = EnemyTemplate(46);
E47 = EnemyTemplate(47);
E48 = EnemyTemplate(48);
E49 = EnemyTemplate(49);
E50 = EnemyTemplate(50);
E51 = EnemyTemplate(51);
E52 = EnemyTemplate(52);
E53 = EnemyTemplate(53);
E54 = EnemyTemplate(54);
E55 = EnemyTemplate(55);
E56 = EnemyTemplate(56);
E57 = EnemyTemplate(57);
E58 = EnemyTemplate(58);
E59 = EnemyTemplate(59);
E60 = EnemyTemplate(60);
E61 = EnemyTemplate(61);
E62 = EnemyTemplate(62);
E63 = EnemyTemplate(63);
E64 = EnemyTemplate(64);
E65 = EnemyTemplate(65);
E66 = EnemyTemplate(66);
E67 = EnemyTemplate(67);
E68 = EnemyTemplate(68);
E69 = EnemyTemplate(69);
E70 = EnemyTemplate(70);
E71 = EnemyTemplate(71);
E72 = EnemyTemplate(72);
E73 = EnemyTemplate(73);
E74 = EnemyTemplate(74);
E75 = EnemyTemplate(75);
E76 = EnemyTemplate(76);
E77 = EnemyTemplate(77);
E78 = EnemyTemplate(78);
E79 = EnemyTemplate(79);
E80 = EnemyTemplate(80);
E81 = EnemyTemplate(81);
E82 = EnemyTemplate(82);
E83 = EnemyTemplate(83);
E84 = EnemyTemplate(84);
E85 = EnemyTemplate(85);
E86 = EnemyTemplate(86);
E87 = EnemyTemplate(87);
E88 = EnemyTemplate(88);
E89 = EnemyTemplate(89);
E90 = EnemyTemplate(90);
E91 = EnemyTemplate(91);
E92 = EnemyTemplate(92);
E93 = EnemyTemplate(93);
E94 = EnemyTemplate(94);
E95 = EnemyTemplate(95);
E96 = EnemyTemplate(96);
E97 = EnemyTemplate(97);
E98 = EnemyTemplate(98);
E99 = EnemyTemplate(99);
E100 = EnemyTemplate(100);
E101 = EnemyTemplate(101);
E102 = EnemyTemplate(102);
E103 = EnemyTemplate(103);
E104 = EnemyTemplate(104);
E105 = EnemyTemplate(105);
E106 = EnemyTemplate(106);
E107 = EnemyTemplate(107);
E108 = EnemyTemplate(108);
E109 = EnemyTemplate(109);
E110 = EnemyTemplate(110);
E111 = EnemyTemplate(111);
E112 = EnemyTemplate(112);
E113 = EnemyTemplate(113);
E114 = EnemyTemplate(114);
E115 = EnemyTemplate(115);
E116 = EnemyTemplate(116);
E117 = EnemyTemplate(117);
E118 = EnemyTemplate(118);
E119 = EnemyTemplate(119);
E120 = EnemyTemplate(120);
E121 = EnemyTemplate(121);
E122 = EnemyTemplate(122);
E123 = EnemyTemplate(123);
E124 = EnemyTemplate(124);
E125 = EnemyTemplate(125);
E126 = EnemyTemplate(126);
E127 = EnemyTemplate(127);
E128 = EnemyTemplate(128);
E129 = EnemyTemplate(129);
E130 = EnemyTemplate(130);
E131 = EnemyTemplate(131);
E132 = EnemyTemplate(132);
E133 = EnemyTemplate(133);
E134 = EnemyTemplate(134);
E135 = EnemyTemplate(135);
E136 = EnemyTemplate(136);
E137 = EnemyTemplate(137);
E138 = EnemyTemplate(138);
E139 = EnemyTemplate(139);
E140 = EnemyTemplate(140);
E141 = EnemyTemplate(141);
E142 = EnemyTemplate(142);
E143 = EnemyTemplate(143);
E144 = EnemyTemplate(144);
E145 = EnemyTemplate(145);
E146 = EnemyTemplate(146);
E147 = EnemyTemplate(147);
E148 = EnemyTemplate(148);
E149 = EnemyTemplate(149);
E150 = EnemyTemplate(150);
E151 = EnemyTemplate(151);
E152 = EnemyTemplate(152);
E153 = EnemyTemplate(153);
E154 = EnemyTemplate(154);
E155 = EnemyTemplate(155);
E156 = EnemyTemplate(156);
E157 = EnemyTemplate(157);
E158 = EnemyTemplate(158);
E159 = EnemyTemplate(159);
E160 = EnemyTemplate(160);
E161 = EnemyTemplate(161);
E162 = EnemyTemplate(162);
E163 = EnemyTemplate(163);
E164 = EnemyTemplate(164);
E165 = EnemyTemplate(165);
E166 = EnemyTemplate(166);
E167 = EnemyTemplate(167);
E168 = EnemyTemplate(168);
E169 = EnemyTemplate(169);
E170 = EnemyTemplate(170);
E171 = EnemyTemplate(171);
E172 = EnemyTemplate(172);
E173 = EnemyTemplate(173);
E174 = EnemyTemplate(174);
E175 = EnemyTemplate(175);
E176 = EnemyTemplate(176);
E177 = EnemyTemplate(177);
E178 = EnemyTemplate(178);
E179 = EnemyTemplate(179);
E180 = EnemyTemplate(180);
E181 = EnemyTemplate(181);
E182 = EnemyTemplate(182);
E183 = EnemyTemplate(183);
E184 = EnemyTemplate(184);
E185 = EnemyTemplate(185);
E186 = EnemyTemplate(186);
E187 = EnemyTemplate(187);
E188 = EnemyTemplate(188);
E189 = EnemyTemplate(189);
E190 = EnemyTemplate(190);
E191 = EnemyTemplate(191);
E192 = EnemyTemplate(192);
E193 = EnemyTemplate(193);
E194 = EnemyTemplate(194);
E195 = EnemyTemplate(195);
E196 = EnemyTemplate(196);
E197 = EnemyTemplate(197);
E198 = EnemyTemplate(198);
E199 = EnemyTemplate(199);
E200 = EnemyTemplate(200);
E201 = EnemyTemplate(201);
E202 = EnemyTemplate(202);
E203 = EnemyTemplate(203);
E204 = EnemyTemplate(204);
E205 = EnemyTemplate(205);
E206 = EnemyTemplate(206);
E207 = EnemyTemplate(207);
E208 = EnemyTemplate(208);
E209 = EnemyTemplate(209);
E210 = EnemyTemplate(210);
E211 = EnemyTemplate(211);
E212 = EnemyTemplate(212);
E213 = EnemyTemplate(213);
E214 = EnemyTemplate(214);
E215 = EnemyTemplate(215);
E216 = EnemyTemplate(216);
E217 = EnemyTemplate(217);
E218 = EnemyTemplate(218);
E219 = EnemyTemplate(219);
E220 = EnemyTemplate(220);
E221 = EnemyTemplate(221);
E222 = EnemyTemplate(222);
E223 = EnemyTemplate(223);
E224 = EnemyTemplate(224);
E225 = EnemyTemplate(225);
E226 = EnemyTemplate(226);
E227 = EnemyTemplate(227);
E228 = EnemyTemplate(228);
E229 = EnemyTemplate(229);
E230 = EnemyTemplate(230);
E231 = EnemyTemplate(231);
E232 = EnemyTemplate(232);
E233 = EnemyTemplate(233);
E234 = EnemyTemplate(234);
E235 = EnemyTemplate(235);
E236 = EnemyTemplate(236);
E237 = EnemyTemplate(237);
E238 = EnemyTemplate(238);
E239 = EnemyTemplate(239);
E240 = EnemyTemplate(240);
E241 = EnemyTemplate(241);
E242 = EnemyTemplate(242);
E243 = EnemyTemplate(243);
E244 = EnemyTemplate(244);
E245 = EnemyTemplate(245);
E246 = EnemyTemplate(246);
E247 = EnemyTemplate(247);
E248 = EnemyTemplate(248);
E249 = EnemyTemplate(249);
E250 = EnemyTemplate(250);
E251 = EnemyTemplate(251);
E252 = EnemyTemplate(252);
E253 = EnemyTemplate(253);
E254 = EnemyTemplate(254);
E255 = EnemyTemplate(255);
E256 = EnemyTemplate(256);
E257 = EnemyTemplate(257);
E258 = EnemyTemplate(258);
E259 = EnemyTemplate(259);
E260 = EnemyTemplate(260);
E261 = EnemyTemplate(261);
E262 = EnemyTemplate(262);
E263 = EnemyTemplate(263);
E264 = EnemyTemplate(264);
E265 = EnemyTemplate(265);
E266 = EnemyTemplate(266);
E267 = EnemyTemplate(267);
E268 = EnemyTemplate(268);
E269 = EnemyTemplate(269);
E270 = EnemyTemplate(270);
E271 = EnemyTemplate(271);
E272 = EnemyTemplate(272);
E273 = EnemyTemplate(273);
E274 = EnemyTemplate(274);
E275 = EnemyTemplate(275);
E276 = EnemyTemplate(276);
E277 = EnemyTemplate(277);
E278 = EnemyTemplate(278);
E279 = EnemyTemplate(279);
E280 = EnemyTemplate(280);
E281 = EnemyTemplate(281);
E282 = EnemyTemplate(282);
E283 = EnemyTemplate(283);
E284 = EnemyTemplate(284);
E285 = EnemyTemplate(285);
E286 = EnemyTemplate(286);
E287 = EnemyTemplate(287);
E288 = EnemyTemplate(288);
E289 = EnemyTemplate(289);
E290 = EnemyTemplate(290);
E291 = EnemyTemplate(291);
E292 = EnemyTemplate(292);
E293 = EnemyTemplate(293);
E294 = EnemyTemplate(294);
E295 = EnemyTemplate(295);
E296 = EnemyTemplate(296);
E297 = EnemyTemplate(297);
E298 = EnemyTemplate(298);
E299 = EnemyTemplate(299);
E300 = EnemyTemplate(300);
E301 = EnemyTemplate(301);
E302 = EnemyTemplate(302);
E303 = EnemyTemplate(303);
E304 = EnemyTemplate(304);
E305 = EnemyTemplate(305);
E306 = EnemyTemplate(306);
E307 = EnemyTemplate(307);
E308 = EnemyTemplate(308);
E309 = EnemyTemplate(309);
E310 = EnemyTemplate(310);
E311 = EnemyTemplate(311);
E312 = EnemyTemplate(312);
E313 = EnemyTemplate(313);
E314 = EnemyTemplate(314);
E315 = EnemyTemplate(315);
E316 = EnemyTemplate(316);
E317 = EnemyTemplate(317);
E318 = EnemyTemplate(318);
E319 = EnemyTemplate(319);
E320 = EnemyTemplate(320);
E321 = EnemyTemplate(321);
E322 = EnemyTemplate(322);
E323 = EnemyTemplate(323);
E324 = EnemyTemplate(324);
E325 = EnemyTemplate(325);
E326 = EnemyTemplate(326);
E327 = EnemyTemplate(327);
E328 = EnemyTemplate(328);
E329 = EnemyTemplate(329);
E330 = EnemyTemplate(330);
E331 = EnemyTemplate(331);
E332 = EnemyTemplate(332);
E333 = EnemyTemplate(333);
E334 = EnemyTemplate(334);
E335 = EnemyTemplate(335);
E336 = EnemyTemplate(336);
E337 = EnemyTemplate(337);
E338 = EnemyTemplate(338);
E339 = EnemyTemplate(339);
E340 = EnemyTemplate(340);
E341 = EnemyTemplate(341);
E342 = EnemyTemplate(342);
E343 = EnemyTemplate(343);
E344 = EnemyTemplate(344);
E345 = EnemyTemplate(345);
E346 = EnemyTemplate(346);
E347 = EnemyTemplate(347);
E348 = EnemyTemplate(348);
E349 = EnemyTemplate(349);
E350 = EnemyTemplate(350);
E351 = EnemyTemplate(351);
E352 = EnemyTemplate(352);
E353 = EnemyTemplate(353);
E354 = EnemyTemplate(354);
E355 = EnemyTemplate(355);
E356 = EnemyTemplate(356);
E357 = EnemyTemplate(357);
E358 = EnemyTemplate(358);
E359 = EnemyTemplate(359);
E360 = EnemyTemplate(360);
E361 = EnemyTemplate(361);
E362 = EnemyTemplate(362);
E363 = EnemyTemplate(363);
E364 = EnemyTemplate(364);
E365 = EnemyTemplate(365);
E366 = EnemyTemplate(366);
E367 = EnemyTemplate(367);
E368 = EnemyTemplate(368);
E369 = EnemyTemplate(369);
E370 = EnemyTemplate(370);
E371 = EnemyTemplate(371);
E372 = EnemyTemplate(372);
E373 = EnemyTemplate(373);
E374 = EnemyTemplate(374);
E375 = EnemyTemplate(375);
E376 = EnemyTemplate(376);
E377 = EnemyTemplate(377);
E378 = EnemyTemplate(378);
E379 = EnemyTemplate(379);
E380 = EnemyTemplate(380);
E381 = EnemyTemplate(381);
E382 = EnemyTemplate(382);
E383 = EnemyTemplate(383);
E384 = EnemyTemplate(384);
E385 = EnemyTemplate(385);
E386 = EnemyTemplate(386);
E387 = EnemyTemplate(387);
E388 = EnemyTemplate(388);
E389 = EnemyTemplate(389);
E390 = EnemyTemplate(390);
E391 = EnemyTemplate(391);
E392 = EnemyTemplate(392);
E393 = EnemyTemplate(393);
E394 = EnemyTemplate(394);
E395 = EnemyTemplate(395);
E396 = EnemyTemplate(396);
E397 = EnemyTemplate(397);
E398 = EnemyTemplate(398);
E399 = EnemyTemplate(399);
E400 = EnemyTemplate(400);
E401 = EnemyTemplate(401);
E402 = EnemyTemplate(402);
E403 = EnemyTemplate(403);
E404 = EnemyTemplate(404);
E405 = EnemyTemplate(405);
E406 = EnemyTemplate(406);
E407 = EnemyTemplate(407);
E408 = EnemyTemplate(408);
E409 = EnemyTemplate(409);
E410 = EnemyTemplate(410);
E411 = EnemyTemplate(411);
E412 = EnemyTemplate(412);
E413 = EnemyTemplate(413);
E414 = EnemyTemplate(414);
E415 = EnemyTemplate(415);
E416 = EnemyTemplate(416);
E417 = EnemyTemplate(417);
E418 = EnemyTemplate(418);
E419 = EnemyTemplate(419);
E420 = EnemyTemplate(420);
E421 = EnemyTemplate(421);
E422 = EnemyTemplate(422);
E423 = EnemyTemplate(423);
E424 = EnemyTemplate(424);
E425 = EnemyTemplate(425);
E426 = EnemyTemplate(426);
E427 = EnemyTemplate(427);
E428 = EnemyTemplate(428);
E429 = EnemyTemplate(429);
E430 = EnemyTemplate(430);
E431 = EnemyTemplate(431);
E432 = EnemyTemplate(432);
E433 = EnemyTemplate(433);
E434 = EnemyTemplate(434);
E435 = EnemyTemplate(435);
E436 = EnemyTemplate(436);
E437 = EnemyTemplate(437);
E438 = EnemyTemplate(438);
E439 = EnemyTemplate(439);
E440 = EnemyTemplate(440);
E441 = EnemyTemplate(441);
E442 = EnemyTemplate(442);
E443 = EnemyTemplate(443);
E444 = EnemyTemplate(444);
E445 = EnemyTemplate(445);
E446 = EnemyTemplate(446);
E447 = EnemyTemplate(447);
E448 = EnemyTemplate(448);
E449 = EnemyTemplate(449);
E450 = EnemyTemplate(450);
E451 = EnemyTemplate(451);
E452 = EnemyTemplate(452);
E453 = EnemyTemplate(453);
E454 = EnemyTemplate(454);
E455 = EnemyTemplate(455);
E456 = EnemyTemplate(456);
E457 = EnemyTemplate(457);
E458 = EnemyTemplate(458);
E459 = EnemyTemplate(459);
E460 = EnemyTemplate(460);
E461 = EnemyTemplate(461);
E462 = EnemyTemplate(462);
E463 = EnemyTemplate(463);
E464 = EnemyTemplate(464);
E465 = EnemyTemplate(465);
E466 = EnemyTemplate(466);
E467 = EnemyTemplate(467);
E468 = EnemyTemplate(468);
E469 = EnemyTemplate(469);
E470 = EnemyTemplate(470);
E471 = EnemyTemplate(471);
E472 = EnemyTemplate(472);
E473 = EnemyTemplate(473);
E474 = EnemyTemplate(474);
E475 = EnemyTemplate(475);
E476 = EnemyTemplate(476);
E477 = EnemyTemplate(477);
E478 = EnemyTemplate(478);
E479 = EnemyTemplate(479);
E480 = EnemyTemplate(480);
E481 = EnemyTemplate(481);
E482 = EnemyTemplate(482);
E483 = EnemyTemplate(483);
E484 = EnemyTemplate(484);
E485 = EnemyTemplate(485);
E486 = EnemyTemplate(486);
E487 = EnemyTemplate(487);
E488 = EnemyTemplate(488);
E489 = EnemyTemplate(489);
E490 = EnemyTemplate(490);
E491 = EnemyTemplate(491);
E492 = EnemyTemplate(492);
E493 = EnemyTemplate(493);
E494 = EnemyTemplate(494);
E495 = EnemyTemplate(495);
E496 = EnemyTemplate(496);
E497 = EnemyTemplate(497);
E498 = EnemyTemplate(498);
E499 = EnemyTemplate(499);
E500 = EnemyTemplate(500);
E501 = EnemyTemplate(501);
E502 = EnemyTemplate(502);
E503 = EnemyTemplate(503);
E504 = EnemyTemplate(504);
E505 = EnemyTemplate(505);
E506 = EnemyTemplate(506);
E507 = EnemyTemplate(507);
E508 = EnemyTemplate(508);
E509 = EnemyTemplate(509);
E510 = EnemyTemplate(510);
E511 = EnemyTemplate(511);
E512 = EnemyTemplate(512);
E513 = EnemyTemplate(513);
E514 = EnemyTemplate(514);
E515 = EnemyTemplate(515);
E516 = EnemyTemplate(516);
E517 = EnemyTemplate(517);
E518 = EnemyTemplate(518);
E519 = EnemyTemplate(519);
E520 = EnemyTemplate(520);
E521 = EnemyTemplate(521);
E522 = EnemyTemplate(522);
E523 = EnemyTemplate(523);
E524 = EnemyTemplate(524);
E525 = EnemyTemplate(525);
E526 = EnemyTemplate(526);
E527 = EnemyTemplate(527);
E528 = EnemyTemplate(528);
E529 = EnemyTemplate(529);
E530 = EnemyTemplate(530);
E531 = EnemyTemplate(531);
E532 = EnemyTemplate(532);
E533 = EnemyTemplate(533);
E534 = EnemyTemplate(534);
E535 = EnemyTemplate(535);
E536 = EnemyTemplate(536);
E537 = EnemyTemplate(537);
E538 = EnemyTemplate(538);
E539 = EnemyTemplate(539);
E540 = EnemyTemplate(540);
E541 = EnemyTemplate(541);
E542 = EnemyTemplate(542);
E543 = EnemyTemplate(543);
E544 = EnemyTemplate(544);
E545 = EnemyTemplate(545);
E546 = EnemyTemplate(546);
E547 = EnemyTemplate(547);
E548 = EnemyTemplate(548);
E549 = EnemyTemplate(549);
E550 = EnemyTemplate(550);
E551 = EnemyTemplate(551);
E552 = EnemyTemplate(552);
E553 = EnemyTemplate(553);
E554 = EnemyTemplate(554);
E555 = EnemyTemplate(555);
E556 = EnemyTemplate(556);
E557 = EnemyTemplate(557);
E558 = EnemyTemplate(558);
E559 = EnemyTemplate(559);
E560 = EnemyTemplate(560);
E561 = EnemyTemplate(561);
E562 = EnemyTemplate(562);
E563 = EnemyTemplate(563);
E564 = EnemyTemplate(564);
E565 = EnemyTemplate(565);
E566 = EnemyTemplate(566);
E567 = EnemyTemplate(567);
E568 = EnemyTemplate(568);
E569 = EnemyTemplate(569);
E570 = EnemyTemplate(570);
E571 = EnemyTemplate(571);
E572 = EnemyTemplate(572);
E573 = EnemyTemplate(573);
E574 = EnemyTemplate(574);
E575 = EnemyTemplate(575);
E576 = EnemyTemplate(576);
E577 = EnemyTemplate(577);
E578 = EnemyTemplate(578);
E579 = EnemyTemplate(579);
E580 = EnemyTemplate(580);
E581 = EnemyTemplate(581);
E582 = EnemyTemplate(582);
E583 = EnemyTemplate(583);
E584 = EnemyTemplate(584);
E585 = EnemyTemplate(585);
E586 = EnemyTemplate(586);
E587 = EnemyTemplate(587);
E588 = EnemyTemplate(588);
E589 = EnemyTemplate(589);
E590 = EnemyTemplate(590);
E591 = EnemyTemplate(591);
E592 = EnemyTemplate(592);
E593 = EnemyTemplate(593);
E594 = EnemyTemplate(594);
E595 = EnemyTemplate(595);
E596 = EnemyTemplate(596);
E597 = EnemyTemplate(597);
E598 = EnemyTemplate(598);
E599 = EnemyTemplate(599);
E600 = EnemyTemplate(600);
E601 = EnemyTemplate(601);
E602 = EnemyTemplate(602);
E603 = EnemyTemplate(603);
E604 = EnemyTemplate(604);
E605 = EnemyTemplate(605);
E606 = EnemyTemplate(606);
E607 = EnemyTemplate(607);
E608 = EnemyTemplate(608);
E609 = EnemyTemplate(609);
E610 = EnemyTemplate(610);
E611 = EnemyTemplate(611);
E612 = EnemyTemplate(612);
E613 = EnemyTemplate(613);
E614 = EnemyTemplate(614);
E615 = EnemyTemplate(615);
E616 = EnemyTemplate(616);
E617 = EnemyTemplate(617);
E618 = EnemyTemplate(618);
E619 = EnemyTemplate(619);
E620 = EnemyTemplate(620);
E621 = EnemyTemplate(621);
E622 = EnemyTemplate(622);
E623 = EnemyTemplate(623);
E624 = EnemyTemplate(624);
E625 = EnemyTemplate(625);
E626 = EnemyTemplate(626);
E627 = EnemyTemplate(627);
E628 = EnemyTemplate(628);
E629 = EnemyTemplate(629);
E630 = EnemyTemplate(630);
E631 = EnemyTemplate(631);
E632 = EnemyTemplate(632);
E633 = EnemyTemplate(633);
E634 = EnemyTemplate(634);
E635 = EnemyTemplate(635);
E636 = EnemyTemplate(636);
E637 = EnemyTemplate(637);
E638 = EnemyTemplate(638);
E639 = EnemyTemplate(639);
E640 = EnemyTemplate(640);
E641 = EnemyTemplate(641);
E642 = EnemyTemplate(642);
E643 = EnemyTemplate(643);
E644 = EnemyTemplate(644);
E645 = EnemyTemplate(645);
E646 = EnemyTemplate(646);
E647 = EnemyTemplate(647);
E648 = EnemyTemplate(648);
E649 = EnemyTemplate(649);
E650 = EnemyTemplate(650);
E651 = EnemyTemplate(651);
E652 = EnemyTemplate(652);
E653 = EnemyTemplate(653);
E654 = EnemyTemplate(654);
E655 = EnemyTemplate(655);
E656 = EnemyTemplate(656);
E657 = EnemyTemplate(657);
E658 = EnemyTemplate(658);
E659 = EnemyTemplate(659);
E660 = EnemyTemplate(660);
E661 = EnemyTemplate(661);
E662 = EnemyTemplate(662);
E663 = EnemyTemplate(663);
E664 = EnemyTemplate(664);
E665 = EnemyTemplate(665);
E666 = EnemyTemplate(666);
E667 = EnemyTemplate(667);
E668 = EnemyTemplate(668);
E669 = EnemyTemplate(669);
E670 = EnemyTemplate(670);
E671 = EnemyTemplate(671);
E672 = EnemyTemplate(672);
E673 = EnemyTemplate(673);
E674 = EnemyTemplate(674);
E675 = EnemyTemplate(675);
E676 = EnemyTemplate(676);
E677 = EnemyTemplate(677);
E678 = EnemyTemplate(678);
E679 = EnemyTemplate(679);
E680 = EnemyTemplate(680);
E681 = EnemyTemplate(681);
E682 = EnemyTemplate(682);
E683 = EnemyTemplate(683);
E684 = EnemyTemplate(684);
E685 = EnemyTemplate(685);
E686 = EnemyTemplate(686);
E687 = EnemyTemplate(687);
E688 = EnemyTemplate(688);
E689 = EnemyTemplate(689);
E690 = EnemyTemplate(690);
E691 = EnemyTemplate(691);
E692 = EnemyTemplate(692);
E693 = EnemyTemplate(693);
E694 = EnemyTemplate(694);
E695 = EnemyTemplate(695);
E696 = EnemyTemplate(696);
E697 = EnemyTemplate(697);
E698 = EnemyTemplate(698);
E699 = EnemyTemplate(699);
Monitor = GameMonitor();
ClockTick1 = ClockTick();

Basic1 = TurretAI(basic_x[0], basic_y[0]);
Cannon1 = TurretAI(cannon_x[0], cannon_y[0]);
Cannon3 = TurretAI(cannon_x[1], cannon_y[1]);
Cannon4 = TurretAI(cannon_x[2], cannon_y[2]);
Sniper1 = TurretAI(sniper_x[0], sniper_y[0]);
Sniper2 = TurretAI(sniper_x[1], sniper_y[1]);

system E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, 
E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, 
E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, 
E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, 
E135, E136, E137, E138, E139, E140, E141, E142, E143, E144, E145, E146, E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157, E158, E159, E160, E161, E162, E163, E164, 
E165, E166, E167, E168, E169, E170, E171, E172, E173, E174, E175, E176, E177, E178, E179, E180, E181, E182, E183, E184, E185, E186, E187, E188, E189, E190, E191, E192, E193, E194, 
E195, E196, E197, E198, E199, E200, E201, E202, E203, E204, E205, E206, E207, E208, E209, E210, E211, E212, E213, E214, E215, E216, E217, E218, E219, E220, E221, E222, E223, E224,
 E225, E226, E227, E228, E229, E230, E231, E232, E233, E234, E235, E236, E237, E238, E239, E240, E241, E242, E243, E244, E245, E246, E247, E248, E249, E250, E251, E252, E253, E254, 
E255, E256, E257, E258, E259, E260, E261, E262, E263, E264, E265, E266, E267, E268, E269, E270, E271, E272, E273, E274, E275, E276, E277, E278, E279, E280, E281, E282, E283, E284,
 E285, E286, E287, E288, E289, E290, E291, E292, E293, E294, E295, E296, E297, E298, E299, E300, E301, E302, E303, E304, E305, E306, E307, E308, E309, E310, E311, E312, E313, E314, 
E315, E316, E317, E318, E319, E320, E321, E322, E323, E324, E325, E326, E327, E328, E329, E330, E331, E332, E333, E334, E335, E336, E337, E338, E339, E340, E341, E342, E343, E344, 
E345, E346, E347, E348, E349, E350, E351, E352, E353, E354, E355, E356, E357, E358, E359, E360, E361, E362, E363, E364, E365, E366, E367, E368, E369, E370, E371, E372, E373, E374, 
E375, E376, E377, E378, E379, E380, E381, E382, E383, E384, E385, E386, E387, E388, E389, E390, E391, E392, E393, E394, E395, E396, E397, E398, E399, E400, E401, E402, E403, E404, 
E405, E406, E407, E408, E409, E410, E411, E412, E413, E414, E415, E416, E417, E418, E419, E420, E421, E422, E423, E424, E425, E426, E427, E428, E429, E430, E431, E432, E433, E434, 
E435, E436, E437, E438, E439, E440, E441, E442, E443, E444, E445, E446, E447, E448, E449, E450, E451, E452, E453, E454, E455, E456, E457, E458, E459, E460, E461, E462, E463, E464, 
E465, E466, E467, E468, E469, E470, E471, E472, E473, E474, E475, E476, E477, E478, E479, E480, E481, E482, E483, E484, E485, E486, E487, E488, E489, E490, E491, E492, E493, E494,
 E495, E496, E497, E498, E499, E500, E501, E502, E503, E504, E505, E506, E507, E508, E509, E510, E511, E512, E513, E514, E515, E516, E517, E518, E519, E520, E521, E522, E523, E524,
 E525, E526, E527, E528, E529, E530, E531, E532, E533, E534, E535, E536, E537, E538, E539, E540, E541, E542, E543, E544, E545, E546, E547, E548, E549, E550, E551, E552, E553, E554, 
E555, E556, E557, E558, E559, E560, E561, E562, E563, E564, E565, E566, E567, E568, E569, E570, E571, E572, E573, E574, E575, E576, E577, E578, E579, E580, E581, E582, E583, E584, 
E585, E586, E587, E588, E589, E590, E591, E592, E593, E594, E595, E596, E597, E598, E599, E600, E601, E602, E603, E604, E605, E606, E607, E608, E609, E610, E611, E612, E613, E614,
 E615, E616, E617, E618, E619, E620, E621, E622, E623, E624, E625, E626, E627, E628, E629, E630, E631, E632, E633, E634, E635, E636, E637, E638, E639, E640, E641, E642, E643, E644, 
E645, E646, E647, E648, E649, E650, E651, E652, E653, E654, E655, E656, E657, E658, E659, E660, E661, E662, E663, E664, E665, E666, E667, E668, E669, E670, E671, E672, E673, E674,
 E675, E676, E677, E678, E679, E680, E681, E682, E683, E684, E685, E686, E687, E688, E689, E690, E691, E692, E693, E694, E695, E696, E697, E698, E699, Monitor, ClockTick1, Basic1, 
Cannon1, Cannon3, Cannon4, Sniper1, Sniper2;
</system>
	<queries>
		<query>
			<formula>A[] not deadlock
</formula>
			<comment/>
		</query>
		<query>
			<formula>E&lt;&gt; hp[0] &lt;= 0 || pos[0] == PATH_LENGTH - 1







</formula>
			<comment/>
		</query>
	</queries>
</nta>
